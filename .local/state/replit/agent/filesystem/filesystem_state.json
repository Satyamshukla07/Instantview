{"file_contents":{"client/src/hooks/useAuth.ts":{"content":"// Referenced from javascript_log_in_with_replit blueprint\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":366},"client/src/pages/login.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { TrendingUp } from \"lucide-react\";\nimport { FcGoogle } from \"react-icons/fc\";\n\nexport default function Login() {\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md space-y-8\">\n        {/* Logo and Title */}\n        <div className=\"text-center space-y-2\">\n          <div className=\"flex items-center justify-center gap-2 mb-4\">\n            <div className=\"w-12 h-12 rounded-md bg-primary flex items-center justify-center\">\n              <TrendingUp className=\"h-7 w-7 text-primary-foreground\" />\n            </div>\n            <span className=\"text-3xl font-bold\">ReelBoost</span>\n          </div>\n          <h1 className=\"text-2xl font-bold tracking-tight\">Welcome Back</h1>\n          <p className=\"text-muted-foreground\">\n            Sign in to your account to continue\n          </p>\n        </div>\n\n        {/* Login Card */}\n        <Card className=\"shadow-lg\">\n          <CardHeader className=\"space-y-1\">\n            <CardTitle className=\"text-2xl text-center\">Sign In</CardTitle>\n            <CardDescription className=\"text-center\">\n              Choose your preferred sign in method\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Google Sign In Button */}\n            <Button \n              variant=\"outline\" \n              size=\"lg\" \n              className=\"w-full h-12 text-base\"\n              asChild\n            >\n              <a href=\"/api/login\" className=\"flex items-center justify-center gap-3\">\n                <FcGoogle className=\"h-5 w-5\" />\n                Continue with Google\n              </a>\n            </Button>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-card px-2 text-muted-foreground\">\n                  Secure Authentication\n                </span>\n              </div>\n            </div>\n\n            {/* Info Text */}\n            <div className=\"text-center text-sm text-muted-foreground space-y-2\">\n              <p>\n                By signing in, you agree to our{\" \"}\n                <a href=\"#\" className=\"text-primary hover:underline\">Terms of Service</a>\n                {\" \"}and{\" \"}\n                <a href=\"#\" className=\"text-primary hover:underline\">Privacy Policy</a>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Back to Home */}\n        <div className=\"text-center\">\n          <Button variant=\"ghost\" asChild>\n            <a href=\"/\">‚Üê Back to Home</a>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2978},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/pages/wallet.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Wallet as WalletIcon, Plus, ArrowUpRight, ArrowDownRight, QrCode, Copy, CheckCircle2, Clock, XCircle } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Transaction, PaymentProof } from \"@shared/schema\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nconst presetAmounts = [500, 1000, 2000, 5000];\nconst UPI_ID = \"reelboost@upi\";\n\nexport default function Wallet() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [addFundsOpen, setAddFundsOpen] = useState(false);\n  const [customAmount, setCustomAmount] = useState(\"\");\n  const [selectedAmount, setSelectedAmount] = useState<number | null>(null);\n  const [utrNumber, setUtrNumber] = useState(\"\");\n  const [screenshotUrl, setScreenshotUrl] = useState(\"\");\n  const [copied, setCopied] = useState(false);\n\n  const { data: transactions, isLoading } = useQuery<Transaction[]>({\n    queryKey: [\"/api/transactions\"],\n  });\n\n  const { data: paymentProofs } = useQuery<PaymentProof[]>({\n    queryKey: [\"/api/wallet/payment-proofs\"],\n  });\n\n  const submitPaymentMutation = useMutation({\n    mutationFn: async (data: { amount: number; utrNumber: string; screenshotUrl: string }) => {\n      await apiRequest(\"POST\", \"/api/wallet/submit-payment-proof\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wallet/payment-proofs\"] });\n      toast({\n        title: \"Payment Proof Submitted\",\n        description: \"Your payment will be verified within 24 hours.\",\n      });\n      setAddFundsOpen(false);\n      setCustomAmount(\"\");\n      setSelectedAmount(null);\n      setUtrNumber(\"\");\n      setScreenshotUrl(\"\");\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit payment proof\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitPayment = () => {\n    const amount = selectedAmount || parseFloat(customAmount);\n    if (!amount || amount <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!utrNumber && !screenshotUrl) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide UTR number or payment screenshot URL\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    submitPaymentMutation.mutate({ amount, utrNumber, screenshotUrl });\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n    toast({\n      title: \"Copied!\",\n      description: \"UPI ID copied to clipboard\",\n    });\n  };\n\n  const getTransactionIcon = (type: string) => {\n    return type === \"deposit\" || type === \"refund\" || type === \"referral_commission\" \n      ? <ArrowUpRight className=\"h-4 w-4 text-green-600 dark:text-green-500\" />\n      : <ArrowDownRight className=\"h-4 w-4 text-red-600 dark:text-red-500\" />;\n  };\n\n  const getTransactionBadge = (type: string) => {\n    const config: Record<string, { variant: \"default\" | \"secondary\" | \"destructive\" | \"outline\", label: string }> = {\n      deposit: { variant: \"outline\", label: \"Deposit\" },\n      order: { variant: \"secondary\", label: \"Order\" },\n      refund: { variant: \"outline\", label: \"Refund\" },\n      referral_commission: { variant: \"outline\", label: \"Referral\" },\n    };\n    const style = config[type] || config.deposit;\n    return <Badge variant={style.variant}>{style.label}</Badge>;\n  };\n\n  const getProofStatusBadge = (status: string) => {\n    const config: Record<string, { icon: any, variant: \"default\" | \"secondary\" | \"destructive\" | \"outline\", label: string }> = {\n      pending: { icon: Clock, variant: \"secondary\", label: \"Pending\" },\n      approved: { icon: CheckCircle2, variant: \"outline\", label: \"Approved\" },\n      rejected: { icon: XCircle, variant: \"destructive\", label: \"Rejected\" },\n    };\n    const style = config[status] || config.pending;\n    const Icon = style.icon;\n    return (\n      <Badge variant={style.variant}>\n        <Icon className=\"h-3 w-3 mr-1\" />\n        {style.label}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Wallet</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage your wallet and transactions\n          </p>\n        </div>\n        <Button onClick={() => setAddFundsOpen(true)} data-testid=\"button-add-funds\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Funds via UPI\n        </Button>\n      </div>\n\n      {/* Wallet Balance Card */}\n      <Card>\n        <CardContent className=\"p-8\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-muted-foreground\">Current Balance</p>\n              <p className=\"text-4xl font-semibold\" data-testid=\"text-wallet-balance-main\">\n                ‚Çπ{parseFloat(user?.walletBalance || \"0\").toFixed(2)}\n              </p>\n            </div>\n            <div className=\"w-16 h-16 rounded-full bg-primary/10 flex items-center justify-center\">\n              <WalletIcon className=\"h-8 w-8 text-primary\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pending Payment Proofs */}\n      {paymentProofs && paymentProofs.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Payment Verification Status</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {paymentProofs.map((proof) => (\n                <div key={proof.id} className=\"flex items-center justify-between p-4 border rounded-lg\" data-testid={`proof-${proof.id}`}>\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center gap-3\">\n                      <span className=\"font-semibold\">‚Çπ{parseFloat(proof.amount).toFixed(2)}</span>\n                      {getProofStatusBadge(proof.status)}\n                    </div>\n                    {proof.utrNumber && (\n                      <p className=\"text-sm text-muted-foreground\">UTR: {proof.utrNumber}</p>\n                    )}\n                    {proof.adminNotes && proof.status === \"rejected\" && (\n                      <p className=\"text-sm text-destructive\">Admin: {proof.adminNotes}</p>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground\">\n                    {new Date(proof.createdAt).toLocaleDateString()}\n                  </span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Transaction History */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Transaction History</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <div className=\"animate-spin w-8 h-8 border-2 border-primary border-t-transparent rounded-full\" />\n            </div>\n          ) : !transactions || transactions.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\">No transactions yet</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Description</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Balance After</TableHead>\n                    <TableHead>Date</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {transactions.map((transaction) => (\n                    <TableRow key={transaction.id} data-testid={`row-transaction-${transaction.id}`}>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          {getTransactionIcon(transaction.type)}\n                          {getTransactionBadge(transaction.type)}\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"max-w-xs truncate\">\n                        {transaction.description || \"‚Äî\"}\n                      </TableCell>\n                      <TableCell className={`font-medium ${\n                        transaction.type === \"deposit\" || transaction.type === \"refund\" || transaction.type === \"referral_commission\"\n                          ? \"text-green-600 dark:text-green-500\"\n                          : \"text-red-600 dark:text-red-500\"\n                      }`}>\n                        {transaction.type === \"order\" ? \"-\" : \"+\"}‚Çπ{parseFloat(transaction.amount).toFixed(2)}\n                      </TableCell>\n                      <TableCell>‚Çπ{parseFloat(transaction.balanceAfter).toFixed(2)}</TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {new Date(transaction.createdAt).toLocaleDateString()}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* UPI Payment Dialog */}\n      <Dialog open={addFundsOpen} onOpenChange={setAddFundsOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Add Funds via UPI</DialogTitle>\n            <DialogDescription>\n              Pay via UPI and submit payment proof for verification\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-6\">\n            {/* Amount Selection */}\n            <div className=\"space-y-3\">\n              <Label>Select Amount</Label>\n              <div className=\"grid grid-cols-2 gap-3\">\n                {presetAmounts.map((amount) => (\n                  <Button\n                    key={amount}\n                    variant={selectedAmount === amount ? \"default\" : \"outline\"}\n                    onClick={() => {\n                      setSelectedAmount(amount);\n                      setCustomAmount(\"\");\n                    }}\n                    data-testid={`button-preset-${amount}`}\n                  >\n                    ‚Çπ{amount}\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            {/* Custom Amount */}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"customAmount\">Or Enter Custom Amount</Label>\n              <Input\n                id=\"customAmount\"\n                type=\"number\"\n                placeholder=\"Enter amount\"\n                value={customAmount}\n                onChange={(e) => {\n                  setCustomAmount(e.target.value);\n                  setSelectedAmount(null);\n                }}\n                min=\"1\"\n                data-testid=\"input-custom-amount\"\n              />\n            </div>\n\n            {/* UPI Payment Info */}\n            {(selectedAmount || customAmount) && (\n              <>\n                <Alert className=\"bg-primary/5 border-primary/20\">\n                  <QrCode className=\"h-4 w-4 text-primary\" />\n                  <AlertDescription>\n                    <div className=\"space-y-3 mt-2\">\n                      <div className=\"space-y-1\">\n                        <p className=\"font-semibold text-foreground\">Amount to Pay:</p>\n                        <p className=\"text-2xl font-bold text-primary\">\n                          ‚Çπ{(selectedAmount || parseFloat(customAmount) || 0).toFixed(2)}\n                        </p>\n                      </div>\n                      <div className=\"space-y-1\">\n                        <p className=\"font-semibold text-foreground\">UPI ID:</p>\n                        <div className=\"flex items-center gap-2\">\n                          <code className=\"bg-background px-3 py-2 rounded border flex-1 text-sm\">\n                            {UPI_ID}\n                          </code>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => copyToClipboard(UPI_ID)}\n                            data-testid=\"button-copy-upi\"\n                          >\n                            {copied ? <CheckCircle2 className=\"h-4 w-4\" /> : <Copy className=\"h-4 w-4\" />}\n                          </Button>\n                        </div>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        <p>‚Ä¢ Open any UPI app (GPay, PhonePe, Paytm, etc.)</p>\n                        <p>‚Ä¢ Send ‚Çπ{(selectedAmount || parseFloat(customAmount) || 0).toFixed(2)} to {UPI_ID}</p>\n                        <p>‚Ä¢ Note down the UTR/Transaction ID</p>\n                      </div>\n                    </div>\n                  </AlertDescription>\n                </Alert>\n\n                {/* Payment Proof Form */}\n                <div className=\"space-y-4 border-t pt-4\">\n                  <h4 className=\"font-semibold\">Submit Payment Proof</h4>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"utrNumber\">UTR / Transaction ID</Label>\n                    <Input\n                      id=\"utrNumber\"\n                      placeholder=\"Enter 12-digit UTR number\"\n                      value={utrNumber}\n                      onChange={(e) => setUtrNumber(e.target.value)}\n                      data-testid=\"input-utr\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"screenshotUrl\">Payment Screenshot URL (Optional)</Label>\n                    <Textarea\n                      id=\"screenshotUrl\"\n                      placeholder=\"Upload screenshot to imgur.com and paste link here\"\n                      value={screenshotUrl}\n                      onChange={(e) => setScreenshotUrl(e.target.value)}\n                      rows={2}\n                      data-testid=\"input-screenshot-url\"\n                    />\n                    <p className=\"text-xs text-muted-foreground\">\n                      Upload your payment screenshot to any image hosting service (like imgur.com) and paste the link here\n                    </p>\n                  </div>\n                </div>\n              </>\n            )}\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-3 pt-4 border-t\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setAddFundsOpen(false);\n                  setCustomAmount(\"\");\n                  setSelectedAmount(null);\n                  setUtrNumber(\"\");\n                  setScreenshotUrl(\"\");\n                }}\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleSubmitPayment}\n                disabled={submitPaymentMutation.isPending || (!selectedAmount && !customAmount)}\n                className=\"flex-1\"\n                data-testid=\"button-submit-payment\"\n              >\n                {submitPaymentMutation.isPending ? \"Submitting...\" : \"Submit Payment Proof\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":16847},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"server/memoryStorage.ts":{"content":"// In-memory storage implementation for local development\nimport {\n  type User,\n  type UpsertUser,\n  type Service,\n  type InsertService,\n  type Order,\n  type InsertOrder,\n  type Transaction,\n  type InsertTransaction,\n  type Referral,\n  type InsertReferral,\n  type PaymentProof,\n  type InsertPaymentProof,\n} from \"@shared/schema\";\nimport { randomBytes } from \"crypto\";\nimport type { IStorage } from \"./storage\";\n\nexport class MemoryStorage implements IStorage {\n  private users = new Map<string, User>();\n  private services = new Map<string, Service>();\n  private orders = new Map<string, Order>();\n  private transactions = new Map<string, Transaction>();\n  private referrals = new Map<string, Referral>();\n  private paymentProofs = new Map<string, PaymentProof>();\n\n  constructor() {\n    // Seed with default admin user\n    this.seedData();\n  }\n\n  private seedData() {\n    const adminId = \"admin-user-1\";\n    const adminUser: User = {\n      id: adminId,\n      email: \"admin@reelboost.com\",\n      firstName: \"Admin\",\n      lastName: \"User\",\n      profileImageUrl: null,\n      role: \"admin\",\n      walletBalance: \"1000.00\",\n      referralCode: \"ADMIN2024\",\n      referredBy: null,\n      apiKey: null,\n      apiKeyEnabled: 0,\n      resellerMarkup: \"0.00\",\n      totalEarnings: \"0.00\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(adminId, adminUser);\n\n    // Add some sample services\n    const sampleServices: Service[] = [\n      {\n        id: \"service-1\",\n        platform: \"instagram\",\n        name: \"Instagram Followers\",\n        description: \"High quality Instagram followers\",\n        pricePerThousand: \"5.00\",\n        minQuantity: 100,\n        maxQuantity: 100000,\n        eta: \"1-3 hours\",\n        isActive: 1,\n        supplierServiceId: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"service-2\",\n        platform: \"instagram\",\n        name: \"Instagram Likes\",\n        description: \"Real Instagram likes from active users\",\n        pricePerThousand: \"3.00\",\n        minQuantity: 50,\n        maxQuantity: 50000,\n        eta: \"30 min - 1 hour\",\n        isActive: 1,\n        supplierServiceId: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: \"service-3\",\n        platform: \"youtube\",\n        name: \"YouTube Views\",\n        description: \"High retention YouTube views\",\n        pricePerThousand: \"8.00\",\n        minQuantity: 100,\n        maxQuantity: 1000000,\n        eta: \"2-6 hours\",\n        isActive: 1,\n        supplierServiceId: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ];\n\n    sampleServices.forEach(service => this.services.set(service.id, service));\n  }\n\n  private generateId(): string {\n    return randomBytes(16).toString(\"hex\");\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const userId = userData.id || this.generateId();\n    const existingUser = this.users.get(userId);\n    \n    const user: User = {\n      id: userId,\n      email: userData.email ?? null,\n      firstName: userData.firstName ?? null,\n      lastName: userData.lastName ?? null,\n      profileImageUrl: userData.profileImageUrl ?? null,\n      role: existingUser?.role || (this.users.size === 0 ? \"admin\" : \"user\"),\n      walletBalance: existingUser?.walletBalance || \"0.00\",\n      referralCode: existingUser?.referralCode || randomBytes(8).toString(\"hex\").toUpperCase(),\n      referredBy: (userData.referredBy !== undefined ? userData.referredBy : existingUser?.referredBy) ?? null,\n      apiKey: existingUser?.apiKey ?? null,\n      apiKeyEnabled: existingUser?.apiKeyEnabled ?? 0,\n      resellerMarkup: existingUser?.resellerMarkup ?? \"0.00\",\n      totalEarnings: existingUser?.totalEarnings ?? \"0.00\",\n      createdAt: existingUser?.createdAt || new Date(),\n      updatedAt: new Date(),\n    };\n\n    this.users.set(user.id, user);\n    return user;\n  }\n\n  async getUserByReferralCode(code: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(u => u.referralCode === code);\n  }\n\n  async updateUserBalance(userId: string, newBalance: string): Promise<void> {\n    const user = this.users.get(userId);\n    if (user) {\n      user.walletBalance = newBalance;\n      user.updatedAt = new Date();\n    }\n  }\n\n  async generateApiKey(userId: string): Promise<string> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    \n    const apiKey = randomBytes(32).toString(\"hex\");\n    user.apiKey = apiKey;\n    user.apiKeyEnabled = 1;\n    user.updatedAt = new Date();\n    return apiKey;\n  }\n\n  // Service operations\n  async getServices(): Promise<Service[]> {\n    return Array.from(this.services.values()).sort((a, b) => \n      b.createdAt.getTime() - a.createdAt.getTime()\n    );\n  }\n\n  async getActiveServices(): Promise<Service[]> {\n    return Array.from(this.services.values())\n      .filter(s => s.isActive === 1)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getService(id: string): Promise<Service | undefined> {\n    return this.services.get(id);\n  }\n\n  async createService(serviceData: InsertService): Promise<Service> {\n    const service: Service = {\n      id: this.generateId(),\n      platform: serviceData.platform,\n      name: serviceData.name,\n      description: serviceData.description ?? null,\n      pricePerThousand: serviceData.pricePerThousand,\n      minQuantity: serviceData.minQuantity ?? 100,\n      maxQuantity: serviceData.maxQuantity ?? 1000000,\n      eta: serviceData.eta ?? null,\n      isActive: serviceData.isActive ?? 1,\n      supplierServiceId: serviceData.supplierServiceId ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.services.set(service.id, service);\n    return service;\n  }\n\n  async updateService(id: string, serviceData: Partial<InsertService>): Promise<Service> {\n    const service = this.services.get(id);\n    if (!service) throw new Error(\"Service not found\");\n    \n    const updated = {\n      ...service,\n      ...serviceData,\n      updatedAt: new Date(),\n    };\n    this.services.set(id, updated);\n    return updated;\n  }\n\n  async deleteService(id: string): Promise<void> {\n    this.services.delete(id);\n  }\n\n  // Order operations\n  async getOrders(userId: string): Promise<Order[]> {\n    return Array.from(this.orders.values())\n      .filter(o => o.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getRecentOrders(userId: string, limit: number = 10): Promise<Order[]> {\n    return this.getOrders(userId).then(orders => orders.slice(0, limit));\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    return Array.from(this.orders.values())\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    return this.orders.get(id);\n  }\n\n  async createOrder(orderData: InsertOrder): Promise<Order> {\n    const order: Order = {\n      id: this.generateId(),\n      ...orderData,\n      status: \"pending\",\n      supplierOrderId: null,\n      startCount: null,\n      remainingCount: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.orders.set(order.id, order);\n    return order;\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<void> {\n    const order = this.orders.get(id);\n    if (order) {\n      order.status = status as any;\n      order.updatedAt = new Date();\n    }\n  }\n\n  // Transaction operations\n  async getTransactions(userId: string): Promise<Transaction[]> {\n    return Array.from(this.transactions.values())\n      .filter(t => t.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createTransaction(transactionData: InsertTransaction): Promise<Transaction> {\n    const transaction: Transaction = {\n      id: this.generateId(),\n      ...transactionData,\n      description: transactionData.description ?? null,\n      orderId: transactionData.orderId ?? null,\n      createdAt: new Date(),\n    };\n    this.transactions.set(transaction.id, transaction);\n    return transaction;\n  }\n\n  // Referral operations\n  async getReferrals(userId: string): Promise<Referral[]> {\n    return Array.from(this.referrals.values())\n      .filter(r => r.referrerId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createReferral(referralData: InsertReferral): Promise<Referral> {\n    const referral: Referral = {\n      id: this.generateId(),\n      ...referralData,\n      commissionEarned: \"0.00\",\n      createdAt: new Date(),\n    };\n    this.referrals.set(referral.id, referral);\n    return referral;\n  }\n\n  async updateReferralCommission(id: string, commission: string): Promise<void> {\n    const referral = this.referrals.get(id);\n    if (referral) {\n      referral.commissionEarned = commission;\n    }\n  }\n\n  // Payment proof operations\n  async getPaymentProofs(userId: string): Promise<PaymentProof[]> {\n    return Array.from(this.paymentProofs.values())\n      .filter(p => p.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getAllPaymentProofs(): Promise<PaymentProof[]> {\n    return Array.from(this.paymentProofs.values())\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getPaymentProof(id: string): Promise<PaymentProof | undefined> {\n    return this.paymentProofs.get(id);\n  }\n\n  async createPaymentProof(proofData: InsertPaymentProof): Promise<PaymentProof> {\n    const proof: PaymentProof = {\n      id: this.generateId(),\n      ...proofData,\n      utrNumber: proofData.utrNumber || null,\n      screenshotUrl: proofData.screenshotUrl || null,\n      status: \"pending\",\n      adminNotes: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.paymentProofs.set(proof.id, proof);\n    return proof;\n  }\n\n  async updatePaymentProofStatus(id: string, status: string, adminNotes?: string): Promise<void> {\n    const proof = this.paymentProofs.get(id);\n    if (proof) {\n      proof.status = status as any;\n      proof.adminNotes = adminNotes || null;\n      proof.updatedAt = new Date();\n    }\n  }\n}\n","size_bytes":10324},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"light\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(\"theme\") as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme,\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) throw new Error(\"useTheme must be used within a ThemeProvider\");\n  return context;\n};\n","size_bytes":1244},"server/db.ts":{"content":"// Referenced from javascript_database blueprint\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nlet pool = null;\nlet db = null;\n\nif (!process.env.DATABASE_URL) {\n  console.warn(\"‚ö†Ô∏è DATABASE_URL not set. Skipping database initialization...\");\n} else {\n  pool = new Pool({ connectionString: process.env.DATABASE_URL });\n  db = drizzle({ client: pool, schema });\n}\n\nexport { pool, db };\n","size_bytes":560},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { services } from \"@shared/schema\";\n\nconst initialServices = [\n  // Instagram Services\n  {\n    platform: \"instagram\" as const,\n    name: \"Instagram Followers\",\n    description: \"High-quality Instagram followers from real accounts\",\n    pricePerThousand: \"2.50\",\n    minQuantity: 100,\n    maxQuantity: 100000,\n    eta: \"30 min - 2 hrs\",\n    isActive: 1,\n  },\n  {\n    platform: \"instagram\" as const,\n    name: \"Instagram Likes\",\n    description: \"Instant Instagram post likes\",\n    pricePerThousand: \"0.50\",\n    minQuantity: 100,\n    maxQuantity: 50000,\n    eta: \"Instant - 1 hr\",\n    isActive: 1,\n  },\n  {\n    platform: \"instagram\" as const,\n    name: \"Instagram Reels Views\",\n    description: \"Boost your Instagram Reels with real views\",\n    pricePerThousand: \"0.80\",\n    minQuantity: 1000,\n    maxQuantity: 1000000,\n    eta: \"30 min - 6 hrs\",\n    isActive: 1,\n  },\n  \n  // YouTube Services\n  {\n    platform: \"youtube\" as const,\n    name: \"YouTube Views\",\n    description: \"Real YouTube video views from active users\",\n    pricePerThousand: \"3.00\",\n    minQuantity: 500,\n    maxQuantity: 500000,\n    eta: \"2 hrs - 12 hrs\",\n    isActive: 1,\n  },\n  {\n    platform: \"youtube\" as const,\n    name: \"YouTube Likes\",\n    description: \"Genuine YouTube video likes\",\n    pricePerThousand: \"4.50\",\n    minQuantity: 100,\n    maxQuantity: 50000,\n    eta: \"1 hr - 6 hrs\",\n    isActive: 1,\n  },\n  {\n    platform: \"youtube\" as const,\n    name: \"YouTube Subscribers\",\n    description: \"Grow your YouTube channel with real subscribers\",\n    pricePerThousand: \"15.00\",\n    minQuantity: 100,\n    maxQuantity: 10000,\n    eta: \"6 hrs - 24 hrs\",\n    isActive: 1,\n  },\n  \n  // Facebook Services\n  {\n    platform: \"facebook\" as const,\n    name: \"Facebook Page Likes\",\n    description: \"Increase your Facebook page likes\",\n    pricePerThousand: \"2.00\",\n    minQuantity: 100,\n    maxQuantity: 50000,\n    eta: \"1 hr - 8 hrs\",\n    isActive: 1,\n  },\n  {\n    platform: \"facebook\" as const,\n    name: \"Facebook Post Reactions\",\n    description: \"Get reactions on your Facebook posts\",\n    pricePerThousand: \"1.50\",\n    minQuantity: 100,\n    maxQuantity: 20000,\n    eta: \"30 min - 4 hrs\",\n    isActive: 1,\n  },\n  \n  // Twitter/X Services\n  {\n    platform: \"twitter\" as const,\n    name: \"Twitter/X Followers\",\n    description: \"Grow your Twitter following organically\",\n    pricePerThousand: \"3.50\",\n    minQuantity: 100,\n    maxQuantity: 50000,\n    eta: \"1 hr - 6 hrs\",\n    isActive: 1,\n  },\n  {\n    platform: \"twitter\" as const,\n    name: \"Twitter/X Likes\",\n    description: \"Boost engagement with Twitter likes\",\n    pricePerThousand: \"1.00\",\n    minQuantity: 100,\n    maxQuantity: 20000,\n    eta: \"Instant - 2 hrs\",\n    isActive: 1,\n  },\n  \n  // Telegram Services\n  {\n    platform: \"telegram\" as const,\n    name: \"Telegram Channel Members\",\n    description: \"Grow your Telegram channel membership\",\n    pricePerThousand: \"1.00\",\n    minQuantity: 100,\n    maxQuantity: 100000,\n    eta: \"Instant - 2 hrs\",\n    isActive: 1,\n  },\n  \n  // TikTok Services\n  {\n    platform: \"tiktok\" as const,\n    name: \"TikTok Followers\",\n    description: \"Increase your TikTok followers\",\n    pricePerThousand: \"2.80\",\n    minQuantity: 100,\n    maxQuantity: 50000,\n    eta: \"1 hr - 6 hrs\",\n    isActive: 1,\n  },\n  {\n    platform: \"tiktok\" as const,\n    name: \"TikTok Likes\",\n    description: \"Get more likes on your TikTok videos\",\n    pricePerThousand: \"0.70\",\n    minQuantity: 100,\n    maxQuantity: 100000,\n    eta: \"30 min - 4 hrs\",\n    isActive: 1,\n  },\n];\n\nasync function seed() {\n  console.log(\"Seeding database with initial services...\");\n  \n  for (const service of initialServices) {\n    try {\n      await db.insert(services).values(service);\n      console.log(`‚úì Added: ${service.name}`);\n    } catch (error: any) {\n      if (error.code === '23505') { // Duplicate key error\n        console.log(`- Skipped (already exists): ${service.name}`);\n      } else {\n        console.error(`‚úó Error adding ${service.name}:`, error.message);\n      }\n    }\n  }\n  \n  console.log(\"Seeding completed!\");\n  process.exit(0);\n}\n\nseed().catch((error) => {\n  console.error(\"Seeding failed:\", error);\n  process.exit(1);\n});\n","size_bytes":4201},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 240 10% 4%;\n\n  --border: 240 6% 90%;\n\n  --card: 240 5% 96%;\n\n  --card-foreground: 240 10% 4%;\n\n  --card-border: 240 6% 88%;\n\n  --sidebar: 240 5% 94%;\n\n  --sidebar-foreground: 240 10% 4%;\n\n  --sidebar-border: 240 6% 86%;\n\n  --sidebar-primary: 261 83% 58%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 240 6% 88%;\n\n  --sidebar-accent-foreground: 240 10% 4%;\n\n  --sidebar-ring: 261 83% 58%;\n\n  --popover: 240 6% 92%;\n\n  --popover-foreground: 240 10% 4%;\n\n  --popover-border: 240 6% 84%;\n\n  --primary: 261 83% 58%;\n\n  --primary-foreground: 0 0% 100%;\n  \n  --accent-green: 153 100% 50%;\n\n  --secondary: 240 6% 84%;\n\n  --secondary-foreground: 240 10% 4%;\n\n  --muted: 240 8% 90%;\n\n  --muted-foreground: 240 4% 46%;\n\n  --accent: 240 10% 88%;\n\n  --accent-foreground: 240 10% 4%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 240 8% 70%;\n  --ring: 261 83% 58%;\n  --chart-1: 239 84% 55%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 200 80% 50%;\n  --chart-5: 280 70% 55%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"Roboto Mono\", Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(240 6% 10% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(240 6% 10% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(240 6% 10% / 0.06), 0px 1px 2px -1px hsl(240 6% 10% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(240 6% 10% / 0.08), 0px 2px 4px -2px hsl(240 6% 10% / 0.05);\n  --shadow-md: 0px 6px 12px -2px hsl(240 6% 10% / 0.10), 0px 3px 6px -3px hsl(240 6% 10% / 0.06);\n  --shadow-lg: 0px 10px 20px -4px hsl(240 6% 10% / 0.12), 0px 4px 8px -4px hsl(240 6% 10% / 0.08);\n  --shadow-xl: 0px 20px 25px -5px hsl(240 6% 10% / 0.15), 0px 8px 10px -6px hsl(240 6% 10% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(240 6% 10% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 6%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 240 4% 16%;\n\n  --card: 0 0% 8%;\n\n  --card-foreground: 0 0% 98%;\n\n  --card-border: 240 4% 18%;\n\n  --sidebar: 240 6% 8%;\n\n  --sidebar-foreground: 0 0% 98%;\n\n  --sidebar-border: 240 4% 14%;\n\n  --sidebar-primary: 261 83% 58%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 240 6% 14%;\n\n  --sidebar-accent-foreground: 0 0% 98%;\n\n  --sidebar-ring: 261 83% 58%;\n\n  --popover: 240 6% 12%;\n\n  --popover-foreground: 0 0% 98%;\n\n  --popover-border: 240 4% 20%;\n\n  --primary: 261 83% 58%;\n\n  --primary-foreground: 0 0% 100%;\n  \n  --accent-green: 153 100% 50%;\n\n  --secondary: 240 6% 18%;\n\n  --secondary-foreground: 0 0% 98%;\n\n  --muted: 240 6% 16%;\n\n  --muted-foreground: 240 5% 65%;\n\n  --accent: 240 8% 14%;\n\n  --accent-foreground: 0 0% 98%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 240 6% 30%;\n  --ring: 261 83% 58%;\n  --chart-1: 239 84% 75%;\n  --chart-2: 142 76% 55%;\n  --chart-3: 38 92% 65%;\n  --chart-4: 200 80% 70%;\n  --chart-5: 280 70% 75%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.15);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.20);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.18), 0px 1px 2px -1px hsl(0 0% 0% / 0.12);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.25), 0px 2px 4px -2px hsl(0 0% 0% / 0.15);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.30), 0px 3px 6px -3px hsl(0 0% 0% / 0.20);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.35), 0px 4px 8px -4px hsl(0 0% 0% / 0.25);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.40), 0px 8px 10px -6px hsl(0 0% 0% / 0.30);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.50);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11031},"shared/schema.ts":{"content":"// ReelBoost Database Schema - Referenced from javascript_database and javascript_log_in_with_replit blueprints\nimport { sql } from \"drizzle-orm\";\nimport { relations } from \"drizzle-orm\";\nimport {\n  pgTable,\n  varchar,\n  text,\n  timestamp,\n  decimal,\n  integer,\n  index,\n  jsonb,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (Required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)]\n);\n\n// User roles enum\nexport const userRoleEnum = pgEnum(\"user_role\", [\"user\", \"reseller\", \"admin\"]);\n\n// Order status enum\nexport const orderStatusEnum = pgEnum(\"order_status\", [\n  \"pending\",\n  \"processing\",\n  \"completed\",\n  \"failed\",\n  \"refunded\",\n]);\n\n// Transaction type enum\nexport const transactionTypeEnum = pgEnum(\"transaction_type\", [\n  \"deposit\",\n  \"order\",\n  \"refund\",\n  \"referral_commission\",\n]);\n\n// Platform enum\nexport const platformEnum = pgEnum(\"platform\", [\n  \"instagram\",\n  \"youtube\",\n  \"facebook\",\n  \"twitter\",\n  \"telegram\",\n  \"tiktok\",\n]);\n\n// Payment proof status enum\nexport const paymentProofStatusEnum = pgEnum(\"payment_proof_status\", [\n  \"pending\",\n  \"approved\",\n  \"rejected\",\n]);\n\n// Users table (Extended for Replit Auth + SMM Panel)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").default(\"user\").notNull(),\n  walletBalance: decimal(\"wallet_balance\", { precision: 10, scale: 2 }).default(\"0.00\").notNull(),\n  referralCode: varchar(\"referral_code\", { length: 20 }).unique(),\n  referredBy: varchar(\"referred_by\"),\n  apiKey: varchar(\"api_key\", { length: 64 }).unique(),\n  apiKeyEnabled: integer(\"api_key_enabled\").default(0), // 0 = disabled, 1 = enabled\n  resellerMarkup: decimal(\"reseller_markup\", { precision: 5, scale: 2 }).default(\"0.00\"), // Percentage markup for resellers\n  totalEarnings: decimal(\"total_earnings\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Services table\nexport const services = pgTable(\"services\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  platform: platformEnum(\"platform\").notNull(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  pricePerThousand: decimal(\"price_per_thousand\", { precision: 8, scale: 2 }).notNull(),\n  minQuantity: integer(\"min_quantity\").default(100).notNull(),\n  maxQuantity: integer(\"max_quantity\").default(1000000).notNull(),\n  eta: varchar(\"eta\", { length: 100 }), // e.g., \"30 min - 6 hrs\"\n  isActive: integer(\"is_active\").default(1).notNull(), // 0 = disabled, 1 = enabled\n  supplierServiceId: varchar(\"supplier_service_id\"), // External API service ID\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Orders table\nexport const orders = pgTable(\n  \"orders\",\n  {\n    id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n    userId: varchar(\"user_id\").notNull().references(() => users.id),\n    serviceId: varchar(\"service_id\").notNull().references(() => services.id),\n    targetLink: text(\"target_link\").notNull(),\n    quantity: integer(\"quantity\").notNull(),\n    amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n    status: orderStatusEnum(\"status\").default(\"pending\").notNull(),\n    supplierOrderId: varchar(\"supplier_order_id\"), // External API order ID\n    startCount: integer(\"start_count\"),\n    remainingCount: integer(\"remaining_count\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  (table) => [\n    index(\"idx_orders_user_id\").on(table.userId),\n    index(\"idx_orders_status\").on(table.status),\n  ]\n);\n\n// Wallet transactions table\nexport const transactions = pgTable(\n  \"transactions\",\n  {\n    id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n    userId: varchar(\"user_id\").notNull().references(() => users.id),\n    type: transactionTypeEnum(\"type\").notNull(),\n    amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n    balanceBefore: decimal(\"balance_before\", { precision: 10, scale: 2 }).notNull(),\n    balanceAfter: decimal(\"balance_after\", { precision: 10, scale: 2 }).notNull(),\n    description: text(\"description\"),\n    orderId: varchar(\"order_id\").references(() => orders.id),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  },\n  (table) => [index(\"idx_transactions_user_id\").on(table.userId)]\n);\n\n// Referrals table\nexport const referrals = pgTable(\n  \"referrals\",\n  {\n    id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n    referrerId: varchar(\"referrer_id\").notNull().references(() => users.id),\n    referredUserId: varchar(\"referred_user_id\").notNull().references(() => users.id),\n    commissionEarned: decimal(\"commission_earned\", { precision: 10, scale: 2 }).default(\"0.00\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  },\n  (table) => [\n    index(\"idx_referrals_referrer\").on(table.referrerId),\n    index(\"idx_referrals_referred\").on(table.referredUserId),\n  ]\n);\n\n// Payment proofs table (for UPI manual payment flow)\nexport const paymentProofs = pgTable(\n  \"payment_proofs\",\n  {\n    id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n    userId: varchar(\"user_id\").notNull().references(() => users.id),\n    amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n    utrNumber: varchar(\"utr_number\", { length: 50 }),\n    screenshotUrl: text(\"screenshot_url\"),\n    status: paymentProofStatusEnum(\"status\").default(\"pending\").notNull(),\n    adminNotes: text(\"admin_notes\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  (table) => [\n    index(\"idx_payment_proofs_user_id\").on(table.userId),\n    index(\"idx_payment_proofs_status\").on(table.status),\n  ]\n);\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  orders: many(orders),\n  transactions: many(transactions),\n  referralsMade: many(referrals, { relationName: \"referrer\" }),\n  referralsReceived: many(referrals, { relationName: \"referred\" }),\n  paymentProofs: many(paymentProofs),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  user: one(users, {\n    fields: [orders.userId],\n    references: [users.id],\n  }),\n  service: one(services, {\n    fields: [orders.serviceId],\n    references: [services.id],\n  }),\n  transactions: many(transactions),\n}));\n\nexport const transactionsRelations = relations(transactions, ({ one }) => ({\n  user: one(users, {\n    fields: [transactions.userId],\n    references: [users.id],\n  }),\n  order: one(orders, {\n    fields: [transactions.orderId],\n    references: [orders.id],\n  }),\n}));\n\nexport const referralsRelations = relations(referrals, ({ one }) => ({\n  referrer: one(users, {\n    fields: [referrals.referrerId],\n    references: [users.id],\n    relationName: \"referrer\",\n  }),\n  referredUser: one(users, {\n    fields: [referrals.referredUserId],\n    references: [users.id],\n    relationName: \"referred\",\n  }),\n}));\n\nexport const paymentProofsRelations = relations(paymentProofs, ({ one }) => ({\n  user: one(users, {\n    fields: [paymentProofs.userId],\n    references: [users.id],\n  }),\n}));\n\n// Zod schemas for validation\nexport const upsertUserSchema = createInsertSchema(users);\nexport const insertServiceSchema = createInsertSchema(services).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertOrderSchema = createInsertSchema(orders).omit({ id: true, createdAt: true, updatedAt: true, status: true, supplierOrderId: true });\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({ id: true, createdAt: true });\nexport const insertReferralSchema = createInsertSchema(referrals).omit({ id: true, createdAt: true });\nexport const insertPaymentProofSchema = createInsertSchema(paymentProofs).omit({ id: true, createdAt: true, updatedAt: true, status: true });\n\n// TypeScript types\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type Service = typeof services.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Referral = typeof referrals.$inferSelect;\nexport type InsertReferral = z.infer<typeof insertReferralSchema>;\nexport type PaymentProof = typeof paymentProofs.$inferSelect;\nexport type InsertPaymentProof = z.infer<typeof insertPaymentProofSchema>;\n","size_bytes":9213},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/pages/admin.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, TrendingUp, DollarSign, Package, AlertCircle, CheckCircle, XCircle, Eye, Plus } from \"lucide-react\";\nimport type { PaymentProof, Service, Order } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertServiceSchema } from \"@shared/schema\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport type { z } from \"zod\";\n\ntype ServiceFormData = z.infer<typeof insertServiceSchema>;\n\ninterface AnalyticsData {\n  orders: {\n    total: number;\n    completed: number;\n    pending: number;\n    processing: number;\n  };\n  revenue: {\n    total: string;\n  };\n  paymentProofs: {\n    pending: number;\n    approved: number;\n    rejected: number;\n  };\n  services: {\n    total: number;\n    active: number;\n  };\n}\n\nexport default function AdminPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedProof, setSelectedProof] = useState<PaymentProof | null>(null);\n  const [selectedService, setSelectedService] = useState<Service | null>(null);\n  const [isServiceDialogOpen, setIsServiceDialogOpen] = useState(false);\n\n  // Check if user is admin\n  if (!user || user.role !== \"admin\") {\n    return (\n      <div className=\"container mx-auto p-8\">\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <Shield className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n            <h2 className=\"text-2xl font-bold mb-2\">Access Denied</h2>\n            <p className=\"text-muted-foreground\">You don't have permission to access this page.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-8 max-w-7xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Admin Dashboard</h1>\n        <p className=\"text-muted-foreground\">Manage services, approve payments, and view analytics</p>\n      </div>\n\n      <Tabs defaultValue=\"analytics\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">Analytics</TabsTrigger>\n          <TabsTrigger value=\"payment-proofs\" data-testid=\"tab-payment-proofs\">Payment Proofs</TabsTrigger>\n          <TabsTrigger value=\"services\" data-testid=\"tab-services\">Services</TabsTrigger>\n          <TabsTrigger value=\"orders\" data-testid=\"tab-orders\">Orders</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"analytics\">\n          <AnalyticsTab />\n        </TabsContent>\n\n        <TabsContent value=\"payment-proofs\">\n          <PaymentProofsTab selectedProof={selectedProof} setSelectedProof={setSelectedProof} />\n        </TabsContent>\n\n        <TabsContent value=\"services\">\n          <ServicesTab \n            selectedService={selectedService} \n            setSelectedService={setSelectedService}\n            isDialogOpen={isServiceDialogOpen}\n            setIsDialogOpen={setIsServiceDialogOpen}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"orders\">\n          <OrdersTab />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nfunction AnalyticsTab() {\n  const { data: analytics } = useQuery<AnalyticsData>({\n    queryKey: [\"/api/admin/analytics\"],\n  });\n\n  if (!analytics) {\n    return <div>Loading analytics...</div>;\n  }\n\n  return (\n    <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n      <Card data-testid=\"card-total-orders\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Total Orders</CardTitle>\n          <Package className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{analytics.orders.total}</div>\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            {analytics.orders.completed} completed, {analytics.orders.pending} pending\n          </p>\n        </CardContent>\n      </Card>\n\n      <Card data-testid=\"card-total-revenue\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n          <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">‚Çπ{analytics.revenue.total}</div>\n          <p className=\"text-xs text-muted-foreground mt-1\">From all orders</p>\n        </CardContent>\n      </Card>\n\n      <Card data-testid=\"card-pending-proofs\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Payment Proofs</CardTitle>\n          <AlertCircle className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{analytics.paymentProofs.pending}</div>\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            {analytics.paymentProofs.approved} approved, {analytics.paymentProofs.rejected} rejected\n          </p>\n        </CardContent>\n      </Card>\n\n      <Card data-testid=\"card-active-services\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Active Services</CardTitle>\n          <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{analytics.services.active}</div>\n          <p className=\"text-xs text-muted-foreground mt-1\">Out of {analytics.services.total} total</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction PaymentProofsTab({ selectedProof, setSelectedProof }: { \n  selectedProof: PaymentProof | null; \n  setSelectedProof: (proof: PaymentProof | null) => void;\n}) {\n  const { toast } = useToast();\n  const [adminNotes, setAdminNotes] = useState(\"\");\n\n  const { data: proofs, isLoading } = useQuery<PaymentProof[]>({\n    queryKey: [\"/api/admin/payment-proofs\"],\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      return await apiRequest(\"PATCH\", `/api/admin/payment-proofs/${id}`, {\n        status,\n        adminNotes,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/payment-proofs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/analytics\"] });\n      toast({\n        title: \"Success\",\n        description: \"Payment proof updated successfully\",\n      });\n      setSelectedProof(null);\n      setAdminNotes(\"\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return <div>Loading payment proofs...</div>;\n  }\n\n  const pendingProofs = proofs?.filter(p => p.status === \"pending\") || [];\n  const processedProofs = proofs?.filter(p => p.status !== \"pending\") || [];\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Pending Payment Proofs</CardTitle>\n          <CardDescription>Review and approve or reject payment submissions</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {pendingProofs.length === 0 ? (\n            <p className=\"text-muted-foreground text-center py-8\">No pending payment proofs</p>\n          ) : (\n            <div className=\"space-y-4\">\n              {pendingProofs.map((proof) => (\n                <Card key={proof.id} className=\"border-2\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant=\"outline\">Pending</Badge>\n                          <span className=\"text-sm text-muted-foreground\">\n                            {new Date(proof.createdAt).toLocaleString()}\n                          </span>\n                        </div>\n                        <div className=\"grid gap-1\">\n                          <div className=\"text-sm\">\n                            <span className=\"font-medium\">Amount:</span> ‚Çπ{proof.amount}\n                          </div>\n                          {proof.utrNumber && (\n                            <div className=\"text-sm\">\n                              <span className=\"font-medium\">UTR:</span> {proof.utrNumber}\n                            </div>\n                          )}\n                          <div className=\"text-sm\">\n                            <span className=\"font-medium\">User ID:</span> {proof.userId.slice(0, 8)}...\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        {proof.screenshotUrl && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => window.open(proof.screenshotUrl || \"\", \"_blank\")}\n                            data-testid={`button-view-screenshot-${proof.id}`}\n                          >\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            View\n                          </Button>\n                        )}\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button \n                              size=\"sm\" \n                              onClick={() => setSelectedProof(proof)}\n                              data-testid={`button-review-${proof.id}`}\n                            >\n                              Review\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent>\n                            <DialogHeader>\n                              <DialogTitle>Review Payment Proof</DialogTitle>\n                              <DialogDescription>\n                                Approve or reject this payment submission\n                              </DialogDescription>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div className=\"grid gap-2\">\n                                <div className=\"text-sm\">\n                                  <span className=\"font-medium\">Amount:</span> ‚Çπ{proof.amount}\n                                </div>\n                                {proof.utrNumber && (\n                                  <div className=\"text-sm\">\n                                    <span className=\"font-medium\">UTR Number:</span> {proof.utrNumber}\n                                  </div>\n                                )}\n                                {proof.screenshotUrl && (\n                                  <div className=\"text-sm\">\n                                    <span className=\"font-medium\">Screenshot:</span>{\" \"}\n                                    <a \n                                      href={proof.screenshotUrl} \n                                      target=\"_blank\" \n                                      rel=\"noopener noreferrer\"\n                                      className=\"text-primary hover:underline\"\n                                    >\n                                      View Screenshot\n                                    </a>\n                                  </div>\n                                )}\n                              </div>\n                              <div>\n                                <Label>Admin Notes (Optional)</Label>\n                                <Textarea\n                                  value={adminNotes}\n                                  onChange={(e) => setAdminNotes(e.target.value)}\n                                  placeholder=\"Add notes about this approval/rejection...\"\n                                  data-testid=\"textarea-admin-notes\"\n                                />\n                              </div>\n                              <div className=\"flex gap-2\">\n                                <Button\n                                  onClick={() => approveMutation.mutate({ id: proof.id, status: \"approved\" })}\n                                  disabled={approveMutation.isPending}\n                                  className=\"flex-1\"\n                                  data-testid=\"button-approve\"\n                                >\n                                  <CheckCircle className=\"h-4 w-4 mr-2\" />\n                                  Approve\n                                </Button>\n                                <Button\n                                  variant=\"destructive\"\n                                  onClick={() => approveMutation.mutate({ id: proof.id, status: \"rejected\" })}\n                                  disabled={approveMutation.isPending}\n                                  className=\"flex-1\"\n                                  data-testid=\"button-reject\"\n                                >\n                                  <XCircle className=\"h-4 w-4 mr-2\" />\n                                  Reject\n                                </Button>\n                              </div>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Processed Payment Proofs</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Date</TableHead>\n                <TableHead>Amount</TableHead>\n                <TableHead>UTR</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Notes</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {processedProofs.map((proof) => (\n                <TableRow key={proof.id}>\n                  <TableCell>{new Date(proof.createdAt).toLocaleDateString()}</TableCell>\n                  <TableCell>‚Çπ{proof.amount}</TableCell>\n                  <TableCell>{proof.utrNumber || \"N/A\"}</TableCell>\n                  <TableCell>\n                    <Badge variant={proof.status === \"approved\" ? \"default\" : \"destructive\"}>\n                      {proof.status}\n                    </Badge>\n                  </TableCell>\n                  <TableCell className=\"max-w-xs truncate\">{proof.adminNotes || \"-\"}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction ServicesTab({ \n  selectedService, \n  setSelectedService,\n  isDialogOpen,\n  setIsDialogOpen\n}: { \n  selectedService: Service | null; \n  setSelectedService: (service: Service | null) => void;\n  isDialogOpen: boolean;\n  setIsDialogOpen: (open: boolean) => void;\n}) {\n  const { toast } = useToast();\n\n  const { data: services, isLoading } = useQuery<Service[]>({\n    queryKey: [\"/api/admin/services\"],\n  });\n\n  const form = useForm<ServiceFormData>({\n    resolver: zodResolver(insertServiceSchema),\n    defaultValues: {\n      platform: \"instagram\",\n      name: \"\",\n      description: \"\",\n      pricePerThousand: \"0.00\",\n      minQuantity: 100,\n      maxQuantity: 10000,\n      eta: \"\",\n      isActive: 1,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: ServiceFormData) => {\n      return await apiRequest(\"POST\", \"/api/admin/services\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/services\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({\n        title: \"Success\",\n        description: \"Service created successfully\",\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleActiveMutation = useMutation({\n    mutationFn: async ({ id, isActive }: { id: string; isActive: number }) => {\n      return await apiRequest(\"PATCH\", `/api/admin/services/${id}`, { isActive });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/services\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({\n        title: \"Success\",\n        description: \"Service status updated\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return <div>Loading services...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h3 className=\"text-lg font-medium\">Manage Services</h3>\n          <p className=\"text-sm text-muted-foreground\">Create, edit, and toggle service availability</p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-service\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Service\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Create New Service</DialogTitle>\n              <DialogDescription>Add a new service to the platform</DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit((data) => createMutation.mutate(data))} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"platform\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Platform</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-platform\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"instagram\">Instagram</SelectItem>\n                          <SelectItem value=\"youtube\">YouTube</SelectItem>\n                          <SelectItem value=\"facebook\">Facebook</SelectItem>\n                          <SelectItem value=\"twitter\">Twitter/X</SelectItem>\n                          <SelectItem value=\"telegram\">Telegram</SelectItem>\n                          <SelectItem value=\"tiktok\">TikTok</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Service Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Instagram Followers\" data-testid=\"input-service-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} value={field.value || \"\"} placeholder=\"High-quality followers...\" data-testid=\"textarea-description\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"pricePerThousand\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Price per 1000</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"number\" step=\"0.01\" data-testid=\"input-price\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"eta\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Delivery Time</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || \"\"} placeholder=\"1-2 hours\" data-testid=\"input-eta\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"minQuantity\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Min Quantity</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            type=\"number\"\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                            data-testid=\"input-min-quantity\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"maxQuantity\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Max Quantity</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            type=\"number\"\n                            onChange={(e) => field.onChange(parseInt(e.target.value))}\n                            data-testid=\"input-max-quantity\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"button-submit-service\">\n                  {createMutation.isPending ? \"Creating...\" : \"Create Service\"}\n                </Button>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardContent className=\"p-0\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Service</TableHead>\n                <TableHead>Platform</TableHead>\n                <TableHead>Price/1K</TableHead>\n                <TableHead>Min-Max</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {services?.map((service) => (\n                <TableRow key={service.id}>\n                  <TableCell className=\"font-medium\">{service.name}</TableCell>\n                  <TableCell className=\"capitalize\">{service.platform}</TableCell>\n                  <TableCell>‚Çπ{service.pricePerThousand}</TableCell>\n                  <TableCell>{service.minQuantity.toLocaleString()} - {service.maxQuantity.toLocaleString()}</TableCell>\n                  <TableCell>\n                    <Badge variant={service.isActive === 1 ? \"default\" : \"secondary\"}>\n                      {service.isActive === 1 ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => toggleActiveMutation.mutate({ \n                        id: service.id, \n                        isActive: service.isActive === 1 ? 0 : 1 \n                      })}\n                      data-testid={`button-toggle-${service.id}`}\n                    >\n                      {service.isActive === 1 ? \"Disable\" : \"Enable\"}\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction OrdersTab() {\n  const { data: orders, isLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/admin/orders\"],\n  });\n\n  if (isLoading) {\n    return <div>Loading orders...</div>;\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>All Orders</CardTitle>\n        <CardDescription>View all orders across the platform</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>ID</TableHead>\n              <TableHead>Date</TableHead>\n              <TableHead>Service</TableHead>\n              <TableHead>Quantity</TableHead>\n              <TableHead>Amount</TableHead>\n              <TableHead>Status</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {orders?.map((order) => (\n              <TableRow key={order.id}>\n                <TableCell className=\"font-mono text-xs\">{order.id.slice(0, 8)}...</TableCell>\n                <TableCell>{new Date(order.createdAt).toLocaleDateString()}</TableCell>\n                <TableCell>{order.serviceId.slice(0, 8)}...</TableCell>\n                <TableCell>{order.quantity.toLocaleString()}</TableCell>\n                <TableCell>‚Çπ{order.amount}</TableCell>\n                <TableCell>\n                  <Badge \n                    variant={\n                      order.status === \"completed\" ? \"default\" :\n                      order.status === \"processing\" ? \"secondary\" :\n                      \"outline\"\n                    }\n                  >\n                    {order.status}\n                  </Badge>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":27941},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Wallet,\n  ShoppingCart,\n  CheckCircle2,\n  Clock,\n  TrendingUp,\n  Plus,\n  ArrowUpRight,\n  AlertCircle,\n  BarChart3,\n  Star,\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { Order } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface UserAnalytics {\n  totalOrders: number;\n  totalSpent: string;\n  ordersByStatus: {\n    pending: number;\n    processing: number;\n    completed: number;\n    failed: number;\n  };\n  popularServices: Array<{\n    serviceId: string;\n    serviceName: string;\n    platform: string;\n    orderCount: number;\n  }>;\n  spendingTrend: Array<{\n    date: string;\n    amount: number;\n  }>;\n}\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n\n  // Fetch recent orders\n  const { data: recentOrders, isLoading: ordersLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/orders/recent\"],\n  });\n\n  // Fetch user analytics\n  const { data: analytics } = useQuery<UserAnalytics>({\n    queryKey: [\"/api/analytics/user\"],\n  });\n\n  // Calculate stats\n  const activeOrders = recentOrders?.filter(o => o.status === \"pending\" || o.status === \"processing\").length || 0;\n  const completedToday = recentOrders?.filter(o => {\n    const today = new Date().toDateString();\n    const orderDate = new Date(o.createdAt).toDateString();\n    return o.status === \"completed\" && orderDate === today;\n  }).length || 0;\n  const totalSpent = recentOrders?.reduce((sum, order) => sum + parseFloat(order.amount), 0) || 0;\n\n  const stats = [\n    {\n      title: \"Wallet Balance\",\n      value: `‚Çπ${parseFloat(user?.walletBalance || \"0\").toFixed(2)}`,\n      icon: Wallet,\n      iconColor: \"text-green-500\",\n      bgColor: \"bg-green-500/10\",\n      testId: \"card-wallet-balance\",\n    },\n    {\n      title: \"Active Orders\",\n      value: activeOrders.toString(),\n      icon: Clock,\n      iconColor: \"text-yellow-500\",\n      bgColor: \"bg-yellow-500/10\",\n      testId: \"card-active-orders\",\n    },\n    {\n      title: \"Completed Today\",\n      value: completedToday.toString(),\n      icon: CheckCircle2,\n      iconColor: \"text-blue-500\",\n      bgColor: \"bg-blue-500/10\",\n      testId: \"card-completed-today\",\n    },\n    {\n      title: \"Total Spent\",\n      value: `‚Çπ${totalSpent.toFixed(2)}`,\n      icon: TrendingUp,\n      iconColor: \"text-purple-500\",\n      bgColor: \"bg-purple-500/10\",\n      testId: \"card-total-spent\",\n    },\n  ];\n\n  const getStatusBadge = (status: string) => {\n    const variants: Record<string, { variant: \"default\" | \"secondary\" | \"destructive\" | \"outline\", label: string }> = {\n      pending: { variant: \"secondary\", label: \"Pending\" },\n      processing: { variant: \"default\", label: \"Processing\" },\n      completed: { variant: \"outline\", label: \"Completed\" },\n      failed: { variant: \"destructive\", label: \"Failed\" },\n      refunded: { variant: \"secondary\", label: \"Refunded\" },\n    };\n    const config = variants[status] || variants.pending;\n    return <Badge variant={config.variant}>{config.label}</Badge>;\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Dashboard</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Welcome back, {user?.firstName || \"User\"}\n          </p>\n        </div>\n        <Button asChild data-testid=\"button-new-order\">\n          <Link href=\"/services\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            New Order\n          </Link>\n        </Button>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {stats.map((stat) => (\n          <Card key={stat.title} data-testid={stat.testId}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground\">{stat.title}</p>\n                  <p className=\"text-2xl font-semibold\">{stat.value}</p>\n                </div>\n                <div className={`w-12 h-12 rounded-md ${stat.bgColor} flex items-center justify-center`}>\n                  <stat.icon className={`h-6 w-6 ${stat.iconColor}`} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Recent Activity */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n          <CardTitle className=\"text-xl font-medium\">Recent Orders</CardTitle>\n          <Button variant=\"ghost\" size=\"sm\" asChild>\n            <Link href=\"/orders\">\n              View All\n              <ArrowUpRight className=\"h-4 w-4 ml-1\" />\n            </Link>\n          </Button>\n        </CardHeader>\n        <CardContent>\n          {ordersLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"animate-spin w-6 h-6 border-2 border-primary border-t-transparent rounded-full\" />\n            </div>\n          ) : !recentOrders || recentOrders.length === 0 ? (\n            <div className=\"text-center py-12 space-y-3\">\n              <ShoppingCart className=\"h-12 w-12 mx-auto text-muted-foreground/50\" />\n              <p className=\"text-muted-foreground\">No orders yet</p>\n              <Button asChild variant=\"outline\" size=\"sm\">\n                <Link href=\"/services\">Browse Services</Link>\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {recentOrders.slice(0, 5).map((order) => (\n                <div\n                  key={order.id}\n                  className=\"flex items-center justify-between p-4 rounded-md border hover-elevate\"\n                  data-testid={`order-item-${order.id}`}\n                >\n                  <div className=\"flex items-start gap-4 min-w-0 flex-1\">\n                    <div className=\"w-10 h-10 rounded-md bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                      <ShoppingCart className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <div className=\"min-w-0 flex-1\">\n                      <div className=\"font-medium truncate\">Order #{order.id.slice(0, 8)}</div>\n                      <div className=\"text-sm text-muted-foreground truncate\">{order.targetLink}</div>\n                      <div className=\"text-xs text-muted-foreground mt-1\">\n                        {new Date(order.createdAt).toLocaleDateString()} at {new Date(order.createdAt).toLocaleTimeString()}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-4 flex-shrink-0\">\n                    <div className=\"text-right\">\n                      <div className=\"font-medium\">‚Çπ{parseFloat(order.amount).toFixed(2)}</div>\n                      <div className=\"text-sm text-muted-foreground\">{order.quantity.toLocaleString()} units</div>\n                    </div>\n                    {getStatusBadge(order.status)}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Analytics Section */}\n      {analytics && analytics.totalOrders > 0 && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Popular Services */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center gap-2\">\n                <Star className=\"h-5 w-5 text-primary\" />\n                <CardTitle>Popular Services</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {analytics.popularServices.length === 0 ? (\n                <p className=\"text-center text-muted-foreground py-8\">No data yet</p>\n              ) : (\n                <div className=\"space-y-4\">\n                  {analytics.popularServices.map((service, index) => {\n                    const maxCount = analytics.popularServices[0].orderCount;\n                    const percentage = (service.orderCount / maxCount) * 100;\n                    return (\n                      <div key={service.serviceId} className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"font-medium text-muted-foreground\">#{index + 1}</span>\n                            <span className=\"font-medium\">{service.serviceName}</span>\n                            <Badge variant=\"outline\" className=\"capitalize\">{service.platform}</Badge>\n                          </div>\n                          <span className=\"text-muted-foreground\">{service.orderCount} orders</span>\n                        </div>\n                        <Progress value={percentage} className=\"h-2\" />\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Order Status Breakdown */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5 text-primary\" />\n                <CardTitle>Order Status</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n                      <span className=\"font-medium\">Completed</span>\n                    </div>\n                    <span className=\"text-muted-foreground\">\n                      {analytics.ordersByStatus.completed} orders\n                    </span>\n                  </div>\n                  <Progress \n                    value={(analytics.ordersByStatus.completed / analytics.totalOrders) * 100} \n                    className=\"h-2 [&>div]:bg-green-500\" \n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className=\"h-4 w-4 text-blue-500\" />\n                      <span className=\"font-medium\">Processing</span>\n                    </div>\n                    <span className=\"text-muted-foreground\">\n                      {analytics.ordersByStatus.processing} orders\n                    </span>\n                  </div>\n                  <Progress \n                    value={(analytics.ordersByStatus.processing / analytics.totalOrders) * 100} \n                    className=\"h-2 [&>div]:bg-blue-500\" \n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <AlertCircle className=\"h-4 w-4 text-yellow-500\" />\n                      <span className=\"font-medium\">Pending</span>\n                    </div>\n                    <span className=\"text-muted-foreground\">\n                      {analytics.ordersByStatus.pending} orders\n                    </span>\n                  </div>\n                  <Progress \n                    value={(analytics.ordersByStatus.pending / analytics.totalOrders) * 100} \n                    className=\"h-2 [&>div]:bg-yellow-500\" \n                  />\n                </div>\n\n                {analytics.ordersByStatus.failed > 0 && (\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <AlertCircle className=\"h-4 w-4 text-red-500\" />\n                        <span className=\"font-medium\">Failed</span>\n                      </div>\n                      <span className=\"text-muted-foreground\">\n                        {analytics.ordersByStatus.failed} orders\n                      </span>\n                    </div>\n                    <Progress \n                      value={(analytics.ordersByStatus.failed / analytics.totalOrders) * 100} \n                      className=\"h-2 [&>div]:bg-red-500\" \n                    />\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Quick Actions */}\n      {user?.referralCode && (\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n              <div className=\"space-y-1\">\n                <h3 className=\"font-medium\">Earn with Referrals</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Share your referral code and earn 10% commission on every purchase\n                </p>\n              </div>\n              <Button variant=\"outline\" asChild>\n                <Link href=\"/referrals\">View Details</Link>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":13690},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/App.tsx":{"content":"// Referenced from javascript_log_in_with_replit blueprint and Shadcn sidebar documentation\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\n// Pages\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Services from \"@/pages/services\";\nimport Orders from \"@/pages/orders\";\nimport Wallet from \"@/pages/wallet\";\nimport Referrals from \"@/pages/referrals\";\nimport Admin from \"@/pages/admin\";\nimport ApiDocs from \"@/pages/api-docs\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/login\" component={Login} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/services\" component={Services} />\n          <Route path=\"/orders\" component={Orders} />\n          <Route path=\"/wallet\" component={Wallet} />\n          <Route path=\"/referrals\" component={Referrals} />\n          <Route path=\"/admin\" component={Admin} />\n          <Route path=\"/api-docs\" component={ApiDocs} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppContent() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Custom sidebar width\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <>\n        <Router />\n        <Toaster />\n      </>\n    );\n  }\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex flex-col flex-1\">\n          <header className=\"flex items-center justify-between p-4 border-b\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <ThemeToggle />\n          </header>\n          <main className=\"flex-1 overflow-auto\">\n            <div className=\"container mx-auto px-6 md:px-8 lg:px-12 py-8 max-w-7xl\">\n              <Router />\n            </div>\n          </main>\n        </div>\n      </div>\n      <Toaster />\n    </SidebarProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\">\n        <TooltipProvider>\n          <AppContent />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3040},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"replit.md":{"content":"# ReelBoost - SMM Panel Platform\n\n## Overview\n\nReelBoost is a professional Social Media Marketing (SMM) panel that allows users to purchase social media engagement services (followers, likes, views) across multiple platforms including Instagram, YouTube, Facebook, Twitter, TikTok, and Telegram. The application features a modern dashboard for managing orders, wallet-based payments, referral systems, and admin controls for service management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build System**\n- **React 18** with TypeScript for type-safe component development\n- **Vite** as the build tool and development server for fast hot module replacement\n- **Wouter** for client-side routing (lightweight alternative to React Router)\n- **TanStack Query (React Query)** for server state management and data fetching\n\n**UI Component System**\n- **Shadcn/ui** component library based on Radix UI primitives\n- **Tailwind CSS** for utility-first styling with custom design tokens\n- **Design System**: \"New York\" style variant inspired by Linear and Notion, emphasizing data clarity and professional aesthetics\n- **Theme Support**: Light and dark mode with CSS custom properties\n- **Typography**: Inter font family (Google Fonts) for consistency\n\n**State Management Strategy**\n- Server state managed through React Query with query key-based caching\n- Authentication state derived from `/api/auth/user` endpoint\n- No global client state management library - local component state used where appropriate\n- Form state handled by React Hook Form with Zod schema validation\n\n### Backend Architecture\n\n**Server Framework**\n- **Express.js** with TypeScript running on Node.js\n- Middleware stack includes JSON parsing, URL encoding, and request/response logging\n- Custom error handling middleware for consistent error responses\n\n**Authentication & Authorization**\n- **Replit Auth** integration using OpenID Connect (OIDC) strategy\n- Passport.js for authentication middleware\n- Session management via `express-session` with PostgreSQL-backed session store\n- Role-based access control (user, reseller, admin) enforced at route level\n- API key authentication for reseller API endpoints\n\n**Database Layer**\n- **Drizzle ORM** for type-safe database operations\n- **Neon Serverless PostgreSQL** as the database provider with WebSocket connections\n- Schema-driven development with migrations managed through Drizzle Kit\n- Enums for constrained values (platforms, order status, transaction types, user roles)\n\n**Data Models**\n- **Users**: Authentication, wallet balance, referral codes, API keys, role assignment\n- **Services**: Platform-specific offerings with pricing, quantity limits, delivery times\n- **Orders**: User purchases with status tracking, target links, quantity, calculated amounts\n- **Transactions**: Financial records for deposits, order charges, refunds, referral commissions\n- **Referrals**: Commission tracking for user-referred signups\n- **Payment Proofs**: UPI payment verification with screenshot uploads and admin approval workflow\n\n**API Design**\n- RESTful conventions with `/api` prefix\n- Rate limiting (100 requests per 15 minutes per IP) on all API routes\n- Authentication required for all endpoints except landing page\n- Dedicated `/api/reseller` routes for API-based integrations\n- Admin-only routes protected with `isAdmin` middleware\n\n### Payment System\n\n**Wallet-Based Architecture**\n- Users must pre-fund wallets before placing orders\n- UPI manual payment flow: user transfers funds, submits UTR number and screenshot\n- Admin approval required for wallet top-ups (prevents fraud)\n- Decimal precision maintained for monetary calculations\n- Transaction history provides full audit trail\n\n**Referral Commission System**\n- Each user receives a unique referral code on signup\n- Referrers earn commission when referred users make purchases\n- Commission amounts tracked in separate transactions\n\n### External Dependencies\n\n**Third-Party Services**\n- **Replit Auth**: OAuth/OIDC authentication provider (`process.env.ISSUER_URL`, `process.env.REPL_ID`)\n- **Neon Database**: Serverless PostgreSQL hosting (`process.env.DATABASE_URL`)\n- **Google Fonts**: Inter and Roboto Mono font families loaded via CDN\n\n**UI Component Libraries**\n- **Radix UI**: Accessible, unstyled component primitives (accordion, dialog, dropdown, select, tabs, toast, etc.)\n- **Lucide React**: Icon library for consistent iconography\n- **date-fns**: Date manipulation and formatting\n- **cmdk**: Command palette component\n- **Recharts**: Charting library for data visualization (referenced but not heavily implemented)\n- **Stripe**: Payment processing infrastructure (installed but UPI manual flow used instead)\n\n**Development Tools**\n- **Replit-specific plugins**: Cartographer, dev banner, runtime error overlay for Replit IDE integration\n- **TSX**: TypeScript execution for development server\n- **ESBuild**: Production build bundling for server code\n\n### Security & Performance\n\n**Security Measures**\n- Session cookies with `httpOnly`, `secure` flags and 1-week TTL\n- CSRF protection through session-based authentication\n- Rate limiting on API routes to prevent abuse\n- Role-based authorization checks on sensitive routes\n- Environment variable validation at startup\n\n**Performance Optimizations**\n- Query result caching via React Query with infinite stale time\n- Memoization for expensive OIDC configuration lookups\n- WebSocket connections to Neon Database for reduced latency\n- Vite's optimized build output with code splitting\n\n### Project Structure Decisions\n\n**Monorepo Layout**\n- `/client`: Frontend React application with components, pages, hooks, and utilities\n- `/server`: Backend Express application with routes, database layer, and authentication\n- `/shared`: Shared TypeScript types and Drizzle schema definitions\n- Path aliases configured: `@/` for client, `@shared/` for shared code, `@assets/` for static assets\n\n**Build & Deployment Strategy**\n- Development: Vite dev server proxies API requests to Express backend\n- Production: Vite builds static assets, ESBuild bundles server code\n- Single deployment artifact with static files served from `/dist/public`\n- Environment-based configuration via `NODE_ENV` variable","size_bytes":6310},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/pages/referrals.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Copy, Check, Gift, Users, DollarSign } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Referral } from \"@shared/schema\";\n\nexport default function Referrals() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [copied, setCopied] = useState(false);\n\n  const { data: referrals, isLoading } = useQuery<Referral[]>({\n    queryKey: [\"/api/referrals\"],\n  });\n\n  const referralLink = user?.referralCode \n    ? `${window.location.origin}?ref=${user.referralCode}`\n    : \"\";\n\n  const totalEarnings = referrals?.reduce((sum, ref) => sum + parseFloat(ref.commissionEarned), 0) || 0;\n  const totalReferrals = referrals?.length || 0;\n\n  const copyToClipboard = () => {\n    if (referralLink) {\n      navigator.clipboard.writeText(referralLink);\n      setCopied(true);\n      toast({\n        title: \"Copied!\",\n        description: \"Referral link copied to clipboard\",\n      });\n      setTimeout(() => setCopied(false), 2000);\n    }\n  };\n\n  const stats = [\n    {\n      title: \"Total Referrals\",\n      value: totalReferrals.toString(),\n      icon: Users,\n      iconColor: \"text-blue-500\",\n      bgColor: \"bg-blue-500/10\",\n    },\n    {\n      title: \"Total Earnings\",\n      value: `‚Çπ${totalEarnings.toFixed(2)}`,\n      icon: DollarSign,\n      iconColor: \"text-green-500\",\n      bgColor: \"bg-green-500/10\",\n    },\n    {\n      title: \"Commission Rate\",\n      value: \"10%\",\n      icon: Gift,\n      iconColor: \"text-purple-500\",\n      bgColor: \"bg-purple-500/10\",\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-semibold\">Referral Program</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Earn 10% commission on every purchase made by your referrals\n        </p>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {stats.map((stat) => (\n          <Card key={stat.title}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground\">{stat.title}</p>\n                  <p className=\"text-2xl font-semibold\">{stat.value}</p>\n                </div>\n                <div className={`w-12 h-12 rounded-md ${stat.bgColor} flex items-center justify-center`}>\n                  <stat.icon className={`h-6 w-6 ${stat.iconColor}`} />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Referral Link */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Your Referral Link</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            Share this link with friends and earn commission on their purchases\n          </p>\n          <div className=\"flex gap-2\">\n            <Input\n              value={referralLink}\n              readOnly\n              className=\"font-mono text-sm\"\n              data-testid=\"input-referral-link\"\n            />\n            <Button\n              onClick={copyToClipboard}\n              variant=\"outline\"\n              className=\"flex-shrink-0\"\n              data-testid=\"button-copy-referral\"\n            >\n              {copied ? (\n                <>\n                  <Check className=\"h-4 w-4 mr-2\" />\n                  Copied\n                </>\n              ) : (\n                <>\n                  <Copy className=\"h-4 w-4 mr-2\" />\n                  Copy\n                </>\n              )}\n            </Button>\n          </div>\n          {user?.referralCode && (\n            <div className=\"p-4 rounded-md bg-muted/50\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Your Referral Code</span>\n                <Badge variant=\"outline\" className=\"font-mono\">\n                  {user.referralCode}\n                </Badge>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* How It Works */}\n      <Card>\n        <CardHeader>\n          <CardTitle>How It Works</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            <div className=\"flex gap-4\">\n              <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-primary\">1</span>\n              </div>\n              <div>\n                <h3 className=\"font-medium\">Share Your Link</h3>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Copy and share your unique referral link with friends and followers\n                </p>\n              </div>\n            </div>\n            <div className=\"flex gap-4\">\n              <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-primary\">2</span>\n              </div>\n              <div>\n                <h3 className=\"font-medium\">They Sign Up & Order</h3>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  When someone signs up using your link and places an order\n                </p>\n              </div>\n            </div>\n            <div className=\"flex gap-4\">\n              <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-sm font-semibold text-primary\">3</span>\n              </div>\n              <div>\n                <h3 className=\"font-medium\">Earn Commission</h3>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  You earn 10% commission on every purchase they make\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Referral History */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Referral History</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <div className=\"animate-spin w-8 h-8 border-2 border-primary border-t-transparent rounded-full\" />\n            </div>\n          ) : !referrals || referrals.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Gift className=\"h-12 w-12 mx-auto text-muted-foreground/50\" />\n              <p className=\"text-muted-foreground mt-3\">No referrals yet</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Start sharing your link to earn commissions\n              </p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Referred User</TableHead>\n                    <TableHead>Commission Earned</TableHead>\n                    <TableHead>Date</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {referrals.map((referral) => (\n                    <TableRow key={referral.id} data-testid={`row-referral-${referral.id}`}>\n                      <TableCell className=\"font-medium\">\n                        User #{referral.referredUserId.slice(0, 8)}\n                      </TableCell>\n                      <TableCell className=\"text-green-600 dark:text-green-500 font-medium\">\n                        ‚Çπ{parseFloat(referral.commissionEarned).toFixed(2)}\n                      </TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {new Date(referral.createdAt).toLocaleDateString()}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8593},"README.LOCAL.md":{"content":"# ReelBoost - Local Development Guide\n\nThis guide will help you run ReelBoost on your local machine.\n\n## Prerequisites\n\n- Node.js (v18 or higher)\n- npm or yarn\n\n## Quick Start\n\n### 1. Install Dependencies\n\n```bash\nnpm install\n```\n\n### 2. Setup Environment Variables (Optional)\n\nCopy the example environment file:\n\n```bash\ncp .env.example .env\n```\n\n**IMPORTANT for Local Development:**\n- **DO NOT** set `DATABASE_URL` in your `.env` file for local development\n- The app automatically uses in-memory storage when `DATABASE_URL` is not set\n- This ensures smooth local development without database setup\n\n**Note:** You don't need to configure anything for basic local development! The app will:\n- Use in-memory storage (no database required)\n- Auto-login as admin user (no Google OAuth setup needed)\n- Run on port 5000\n\n### 3. Run the Application\n\n```bash\nnpm run dev\n```\n\nThe application will start on http://localhost:5000\n\n### 4. Access the Application\n\n1. Open your browser and go to http://localhost:5000\n2. Click \"Login\" - you'll be automatically logged in as admin\n3. Start exploring the features!\n\n## Features Available Locally\n\n‚úÖ All features work without any configuration:\n- **In-Memory Storage**: No database setup required\n- **Auto Admin Login**: Instant access without OAuth setup\n- **Sample Data**: Pre-loaded with 3 sample services\n- **Full Functionality**: Orders, wallet, referrals, admin panel\n\n## Optional: Google OAuth Setup\n\nIf you want to use real Google OAuth:\n\n1. Go to [Google Cloud Console](https://console.cloud.google.com/apis/credentials)\n2. Create OAuth 2.0 credentials\n3. Add authorized redirect URI: `http://localhost:5000/api/callback`\n4. Copy Client ID and Secret to `.env` file:\n   ```\n   GOOGLE_CLIENT_ID=your-client-id\n   GOOGLE_CLIENT_SECRET=your-client-secret\n   ```\n\n## Optional: PostgreSQL Database\n\nIf you want persistent storage instead of in-memory:\n\n1. Install PostgreSQL\n2. Create a database: `createdb reelboost`\n3. Add to `.env`:\n   ```\n   DATABASE_URL=postgresql://user:password@localhost:5432/reelboost\n   ```\n4. Run migrations:\n   ```bash\n   npm run db:push\n   ```\n\n## Available Scripts\n\n- `npm run dev` - Start development server\n- `npm run build` - Build for production\n- `npm run start` - Start production server\n- `npm run db:push` - Push database schema (if using PostgreSQL)\n- `npm run check` - Type check\n\n## Default Admin Credentials\n\nWhen running without Google OAuth:\n- **User ID**: admin-user-1\n- **Email**: admin@reelboost.com\n- **Role**: Admin\n- **Initial Wallet Balance**: ‚Çπ1000\n\n## Project Structure\n\n```\n‚îú‚îÄ‚îÄ client/              # React frontend\n‚îÇ   ‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/  # UI components\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/       # Page components\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ hooks/       # Custom hooks\n‚îú‚îÄ‚îÄ server/              # Express backend\n‚îÇ   ‚îú‚îÄ‚îÄ index.ts         # Server entry point\n‚îÇ   ‚îú‚îÄ‚îÄ routes.ts        # API routes\n‚îÇ   ‚îú‚îÄ‚îÄ replitAuth.ts    # Authentication\n‚îÇ   ‚îú‚îÄ‚îÄ storage.ts       # Database storage\n‚îÇ   ‚îú‚îÄ‚îÄ memoryStorage.ts # In-memory storage\n‚îÇ   ‚îî‚îÄ‚îÄ db.ts            # Database connection\n‚îú‚îÄ‚îÄ shared/              # Shared types and schemas\n‚îÇ   ‚îî‚îÄ‚îÄ schema.ts        # Database schema\n‚îî‚îÄ‚îÄ package.json\n```\n\n## Troubleshooting\n\n### Port Already in Use\n\nIf port 5000 is already in use, change it in `.env`:\n```\nPORT=3000\n```\n\n### Module Not Found Errors\n\nDelete `node_modules` and reinstall:\n```bash\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n### Cannot Find Type Definitions\n\nRun type check to identify issues:\n```bash\nnpm run check\n```\n\n## Production Deployment\n\nFor production deployment:\n\n1. Set `NODE_ENV=production`\n2. Configure Google OAuth credentials\n3. Setup PostgreSQL database\n4. Set strong `SESSION_SECRET`\n5. Build the application: `npm run build`\n6. Start server: `npm start`\n\n## Support\n\nFor issues or questions, please check the main `replit.md` file for architecture details.\n\n---\n\n**Enjoy building with ReelBoost! üöÄ**\n","size_bytes":4034},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/order-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { Service } from \"@shared/schema\";\nimport { Wallet, AlertCircle } from \"lucide-react\";\n\nconst orderSchema = z.object({\n  targetLink: z.string().url(\"Please enter a valid URL\"),\n  quantity: z.number().min(1, \"Quantity must be at least 1\"),\n});\n\ntype OrderFormData = z.infer<typeof orderSchema>;\n\ninterface OrderFormProps {\n  service: Service;\n  onSuccess: () => void;\n}\n\nexport function OrderForm({ service, onSuccess }: OrderFormProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [quantity, setQuantity] = useState(service.minQuantity);\n  const [calculatedPrice, setCalculatedPrice] = useState(0);\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm<OrderFormData>({\n    resolver: zodResolver(orderSchema),\n    defaultValues: {\n      targetLink: \"\",\n      quantity: service.minQuantity,\n    },\n  });\n\n  // Calculate price whenever quantity changes\n  useEffect(() => {\n    const price = (quantity / 1000) * parseFloat(service.pricePerThousand);\n    setCalculatedPrice(price);\n    setValue(\"quantity\", quantity);\n  }, [quantity, service.pricePerThousand, setValue]);\n\n  const orderMutation = useMutation({\n    mutationFn: async (data: OrderFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/orders\", {\n        serviceId: service.id,\n        targetLink: data.targetLink,\n        quantity: data.quantity,\n      });\n      return response;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Order Placed\",\n        description: \"Your order has been placed successfully!\",\n      });\n      onSuccess();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Order Failed\",\n        description: error.message || \"Failed to place order. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: OrderFormData) => {\n    orderMutation.mutate(data);\n  };\n\n  const walletBalance = parseFloat(user?.walletBalance || \"0\");\n  const hasInsufficientFunds = calculatedPrice > walletBalance;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n      {/* Service Info */}\n      <div className=\"p-4 rounded-md bg-muted/50 space-y-2\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-muted-foreground\">Service</span>\n          <span className=\"font-medium\">{service.name}</span>\n        </div>\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-muted-foreground\">Price per 1K</span>\n          <span className=\"font-medium\">‚Çπ{parseFloat(service.pricePerThousand).toFixed(2)}</span>\n        </div>\n        {service.eta && (\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-muted-foreground\">Delivery Time</span>\n            <span className=\"font-medium\">{service.eta}</span>\n          </div>\n        )}\n      </div>\n\n      {/* Target Link */}\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"targetLink\">Target Link *</Label>\n        <Input\n          id=\"targetLink\"\n          type=\"url\"\n          placeholder=\"https://instagram.com/p/...\"\n          {...register(\"targetLink\")}\n          data-testid=\"input-target-link\"\n        />\n        {errors.targetLink && (\n          <p className=\"text-sm text-destructive\">{errors.targetLink.message}</p>\n        )}\n      </div>\n\n      {/* Quantity Slider */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <Label>Quantity</Label>\n          <div className=\"flex items-center gap-2\">\n            <Input\n              type=\"number\"\n              value={quantity}\n              onChange={(e) => {\n                const val = parseInt(e.target.value) || service.minQuantity;\n                const clamped = Math.min(Math.max(val, service.minQuantity), service.maxQuantity);\n                setQuantity(clamped);\n              }}\n              min={service.minQuantity}\n              max={service.maxQuantity}\n              className=\"w-32\"\n              data-testid=\"input-quantity\"\n            />\n          </div>\n        </div>\n        <Slider\n          value={[quantity]}\n          onValueChange={([value]) => setQuantity(value)}\n          min={service.minQuantity}\n          max={service.maxQuantity}\n          step={service.minQuantity}\n          className=\"w-full\"\n        />\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n          <span>Min: {service.minQuantity.toLocaleString()}</span>\n          <span>Max: {service.maxQuantity.toLocaleString()}</span>\n        </div>\n      </div>\n\n      {/* Price Calculation */}\n      <div className=\"p-4 rounded-md border space-y-3\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-muted-foreground\">Calculated Price</span>\n          <span className=\"text-2xl font-semibold\" data-testid=\"text-calculated-price\">\n            ‚Çπ{calculatedPrice.toFixed(2)}\n          </span>\n        </div>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Wallet className=\"h-4 w-4\" />\n            <span>Wallet Balance</span>\n          </div>\n          <span className={`font-medium ${hasInsufficientFunds ? 'text-destructive' : 'text-green-600 dark:text-green-500'}`}>\n            ‚Çπ{walletBalance.toFixed(2)}\n          </span>\n        </div>\n      </div>\n\n      {/* Insufficient Funds Alert */}\n      {hasInsufficientFunds && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            Insufficient wallet balance. Please add funds to continue.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Submit Button */}\n      <div className=\"flex gap-3\">\n        <Button\n          type=\"submit\"\n          className=\"flex-1\"\n          disabled={orderMutation.isPending || hasInsufficientFunds}\n          data-testid=\"button-submit-order\"\n        >\n          {orderMutation.isPending ? \"Placing Order...\" : \"Place Order\"}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":7391},"client/src/pages/api-docs.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Copy, Check, Key, Code, BookOpen } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ApiDocs() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [copiedKey, setCopiedKey] = useState(false);\n  const [copiedCode, setCopiedCode] = useState<string | null>(null);\n\n  const copyToClipboard = (text: string, type: \"key\" | \"code\") => {\n    navigator.clipboard.writeText(text);\n    if (type === \"key\") {\n      setCopiedKey(true);\n      setTimeout(() => setCopiedKey(false), 2000);\n    } else {\n      setCopiedCode(text);\n      setTimeout(() => setCopiedCode(null), 2000);\n    }\n    toast({\n      title: \"Copied!\",\n      description: \"Code copied to clipboard\",\n    });\n  };\n\n  const codeExamples = {\n    placeOrder: `// Place an order\nconst response = await fetch('https://reelboost.app/api/reseller/order', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'X-API-Key': 'YOUR_API_KEY'\n  },\n  body: JSON.stringify({\n    serviceId: 'service-uuid',\n    targetLink: 'https://instagram.com/p/...',\n    quantity: 1000\n  })\n});\n\nconst data = await response.json();\nconsole.log(data);`,\n    \n    checkStatus: `// Check order status\nconst response = await fetch('https://reelboost.app/api/reseller/order/{orderId}', {\n  method: 'GET',\n  headers: {\n    'X-API-Key': 'YOUR_API_KEY'\n  }\n});\n\nconst order = await response.json();\nconsole.log(order.status);`,\n\n    getServices: `// Get available services\nconst response = await fetch('https://reelboost.app/api/reseller/services', {\n  method: 'GET',\n  headers: {\n    'X-API-Key': 'YOUR_API_KEY'\n  }\n});\n\nconst services = await response.json();\nconsole.log(services);`,\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-semibold\">API Documentation</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Integrate ReelBoost services into your application\n        </p>\n      </div>\n\n      {/* API Key Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Key className=\"h-5 w-5\" />\n            Your API Key\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex gap-2\">\n            <div className=\"flex-1 p-3 rounded-md bg-muted font-mono text-sm break-all\">\n              {user?.apiKey || \"No API key generated\"}\n            </div>\n            <Button\n              onClick={() => user?.apiKey && copyToClipboard(user.apiKey, \"key\")}\n              variant=\"outline\"\n              className=\"flex-shrink-0\"\n              disabled={!user?.apiKey}\n              data-testid=\"button-copy-api-key\"\n            >\n              {copiedKey ? (\n                <>\n                  <Check className=\"h-4 w-4 mr-2\" />\n                  Copied\n                </>\n              ) : (\n                <>\n                  <Copy className=\"h-4 w-4 mr-2\" />\n                  Copy\n                </>\n              )}\n            </Button>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-sm text-muted-foreground\">Status:</span>\n            <Badge variant={user?.apiKeyEnabled === 1 ? \"outline\" : \"secondary\"}>\n              {user?.apiKeyEnabled === 1 ? \"Active\" : \"Disabled\"}\n            </Badge>\n          </div>\n          {user?.resellerMarkup && parseFloat(user.resellerMarkup) > 0 && (\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-muted-foreground\">Your Markup:</span>\n              <Badge variant=\"outline\">{parseFloat(user.resellerMarkup).toFixed(0)}%</Badge>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* API Documentation Tabs */}\n      <Tabs defaultValue=\"overview\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">\n            <BookOpen className=\"h-4 w-4 mr-2\" />\n            Overview\n          </TabsTrigger>\n          <TabsTrigger value=\"endpoints\">\n            <Code className=\"h-4 w-4 mr-2\" />\n            Endpoints\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Getting Started</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-medium mb-2\">Authentication</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  All API requests must include your API key in the header:\n                </p>\n                <div className=\"mt-2 p-3 rounded-md bg-muted font-mono text-sm\">\n                  X-API-Key: YOUR_API_KEY\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-medium mb-2\">Base URL</h3>\n                <div className=\"p-3 rounded-md bg-muted font-mono text-sm\">\n                  https://reelboost.app/api/reseller\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-medium mb-2\">Response Format</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  All responses are in JSON format with the following structure:\n                </p>\n                <pre className=\"mt-2 p-3 rounded-md bg-muted text-sm overflow-x-auto\">\n{`{\n  \"success\": true,\n  \"data\": { ... },\n  \"message\": \"Success message\"\n}`}\n                </pre>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"endpoints\" className=\"space-y-6\">\n          {/* Place Order */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>POST /reseller/order</CardTitle>\n                <Badge>Place Order</Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                Create a new order for a service\n              </p>\n              <div>\n                <h4 className=\"text-sm font-medium mb-2\">Request Body</h4>\n                <pre className=\"p-3 rounded-md bg-muted text-sm overflow-x-auto\">\n{`{\n  \"serviceId\": \"string (UUID)\",\n  \"targetLink\": \"string (URL)\",\n  \"quantity\": \"number\"\n}`}\n                </pre>\n              </div>\n              <div>\n                <h4 className=\"text-sm font-medium mb-2\">Example</h4>\n                <div className=\"relative\">\n                  <pre className=\"p-3 rounded-md bg-muted text-sm overflow-x-auto\">\n                    {codeExamples.placeOrder}\n                  </pre>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    className=\"absolute top-2 right-2\"\n                    onClick={() => copyToClipboard(codeExamples.placeOrder, \"code\")}\n                  >\n                    {copiedCode === codeExamples.placeOrder ? <Check className=\"h-3 w-3\" /> : <Copy className=\"h-3 w-3\" />}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Check Order Status */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>GET /reseller/order/:orderId</CardTitle>\n                <Badge variant=\"secondary\">Check Status</Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                Get the status of an existing order\n              </p>\n              <div>\n                <h4 className=\"text-sm font-medium mb-2\">Example</h4>\n                <div className=\"relative\">\n                  <pre className=\"p-3 rounded-md bg-muted text-sm overflow-x-auto\">\n                    {codeExamples.checkStatus}\n                  </pre>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    className=\"absolute top-2 right-2\"\n                    onClick={() => copyToClipboard(codeExamples.checkStatus, \"code\")}\n                  >\n                    {copiedCode === codeExamples.checkStatus ? <Check className=\"h-3 w-3\" /> : <Copy className=\"h-3 w-3\" />}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Get Services */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>GET /reseller/services</CardTitle>\n                <Badge variant=\"outline\">Get Services</Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                Get list of all available services with pricing\n              </p>\n              <div>\n                <h4 className=\"text-sm font-medium mb-2\">Example</h4>\n                <div className=\"relative\">\n                  <pre className=\"p-3 rounded-md bg-muted text-sm overflow-x-auto\">\n                    {codeExamples.getServices}\n                  </pre>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    className=\"absolute top-2 right-2\"\n                    onClick={() => copyToClipboard(codeExamples.getServices, \"code\")}\n                  >\n                    {copiedCode === codeExamples.getServices ? <Check className=\"h-3 w-3\" /> : <Copy className=\"h-3 w-3\" />}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":10175},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/storage.ts":{"content":"// Referenced from javascript_database and javascript_log_in_with_replit blueprints\nimport {\n  users,\n  services,\n  orders,\n  transactions,\n  referrals,\n  paymentProofs,\n  type User,\n  type UpsertUser,\n  type Service,\n  type InsertService,\n  type Order,\n  type InsertOrder,\n  type Transaction,\n  type InsertTransaction,\n  type Referral,\n  type InsertReferral,\n  type PaymentProof,\n  type InsertPaymentProof,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql } from \"drizzle-orm\";\nimport { randomBytes } from \"crypto\";\n\nexport interface IStorage {\n  // User operations (Required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getUserByReferralCode(code: string): Promise<User | undefined>;\n  updateUserBalance(userId: string, newBalance: string): Promise<void>;\n  generateApiKey(userId: string): Promise<string>;\n  \n  // Service operations\n  getServices(): Promise<Service[]>;\n  getActiveServices(): Promise<Service[]>;\n  getService(id: string): Promise<Service | undefined>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, service: Partial<InsertService>): Promise<Service>;\n  deleteService(id: string): Promise<void>;\n  \n  // Order operations\n  getOrders(userId: string): Promise<Order[]>;\n  getRecentOrders(userId: string, limit?: number): Promise<Order[]>;\n  getAllOrders(): Promise<Order[]>;\n  getOrder(id: string): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrderStatus(id: string, status: string): Promise<void>;\n  \n  // Transaction operations\n  getTransactions(userId: string): Promise<Transaction[]>;\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  \n  // Referral operations\n  getReferrals(userId: string): Promise<Referral[]>;\n  createReferral(referral: InsertReferral): Promise<Referral>;\n  updateReferralCommission(id: string, commission: string): Promise<void>;\n  \n  // Payment proof operations\n  getPaymentProofs(userId: string): Promise<PaymentProof[]>;\n  getAllPaymentProofs(): Promise<PaymentProof[]>;\n  getPaymentProof(id: string): Promise<PaymentProof | undefined>;\n  createPaymentProof(proof: InsertPaymentProof): Promise<PaymentProof>;\n  updatePaymentProofStatus(id: string, status: string, adminNotes?: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    // Check if this is the first user (make them admin)\n    const existingUsers = await db.select().from(users);\n    const isFirstUser = existingUsers.length === 0;\n    \n    const [user] = await db\n      .insert(users)\n      .values({\n        ...userData,\n        role: isFirstUser ? 'admin' : userData.role || 'user',\n      })\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    \n    // Generate referral code if not exists\n    if (!user.referralCode) {\n      const referralCode = randomBytes(8).toString('hex').toUpperCase();\n      const [updatedUser] = await db\n        .update(users)\n        .set({ referralCode })\n        .where(eq(users.id, user.id))\n        .returning();\n      return updatedUser;\n    }\n    \n    return user;\n  }\n\n  async getUserByReferralCode(code: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.referralCode, code));\n    return user;\n  }\n\n  async updateUserBalance(userId: string, newBalance: string): Promise<void> {\n    await db.update(users).set({ walletBalance: newBalance }).where(eq(users.id, userId));\n  }\n\n  async generateApiKey(userId: string): Promise<string> {\n    const apiKey = randomBytes(32).toString('hex');\n    await db.update(users).set({ apiKey, apiKeyEnabled: 1 }).where(eq(users.id, userId));\n    return apiKey;\n  }\n\n  // Service operations\n  async getServices(): Promise<Service[]> {\n    return await db.select().from(services).orderBy(desc(services.createdAt));\n  }\n\n  async getActiveServices(): Promise<Service[]> {\n    return await db.select().from(services).where(eq(services.isActive, 1));\n  }\n\n  async getService(id: string): Promise<Service | undefined> {\n    const [service] = await db.select().from(services).where(eq(services.id, id));\n    return service;\n  }\n\n  async createService(serviceData: InsertService): Promise<Service> {\n    const [service] = await db.insert(services).values(serviceData).returning();\n    return service;\n  }\n\n  async updateService(id: string, serviceData: Partial<InsertService>): Promise<Service> {\n    const [service] = await db\n      .update(services)\n      .set({ ...serviceData, updatedAt: new Date() })\n      .where(eq(services.id, id))\n      .returning();\n    return service;\n  }\n\n  async deleteService(id: string): Promise<void> {\n    await db.delete(services).where(eq(services.id, id));\n  }\n\n  // Order operations\n  async getOrders(userId: string): Promise<Order[]> {\n    return await db\n      .select()\n      .from(orders)\n      .where(eq(orders.userId, userId))\n      .orderBy(desc(orders.createdAt));\n  }\n\n  async getRecentOrders(userId: string, limit: number = 10): Promise<Order[]> {\n    return await db\n      .select()\n      .from(orders)\n      .where(eq(orders.userId, userId))\n      .orderBy(desc(orders.createdAt))\n      .limit(limit);\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    return await db.select().from(orders).orderBy(desc(orders.createdAt));\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    const [order] = await db.select().from(orders).where(eq(orders.id, id));\n    return order;\n  }\n\n  async createOrder(orderData: InsertOrder): Promise<Order> {\n    const [order] = await db.insert(orders).values(orderData).returning();\n    return order;\n  }\n\n  async updateOrderStatus(id: string, status: string): Promise<void> {\n    await db\n      .update(orders)\n      .set({ status: status as any, updatedAt: new Date() })\n      .where(eq(orders.id, id));\n  }\n\n  // Transaction operations\n  async getTransactions(userId: string): Promise<Transaction[]> {\n    return await db\n      .select()\n      .from(transactions)\n      .where(eq(transactions.userId, userId))\n      .orderBy(desc(transactions.createdAt));\n  }\n\n  async createTransaction(transactionData: InsertTransaction): Promise<Transaction> {\n    const [transaction] = await db.insert(transactions).values(transactionData).returning();\n    return transaction;\n  }\n\n  // Referral operations\n  async getReferrals(userId: string): Promise<Referral[]> {\n    return await db\n      .select()\n      .from(referrals)\n      .where(eq(referrals.referrerId, userId))\n      .orderBy(desc(referrals.createdAt));\n  }\n\n  async createReferral(referralData: InsertReferral): Promise<Referral> {\n    const [referral] = await db.insert(referrals).values(referralData).returning();\n    return referral;\n  }\n\n  async updateReferralCommission(id: string, commission: string): Promise<void> {\n    await db.update(referrals).set({ commissionEarned: commission }).where(eq(referrals.id, id));\n  }\n\n  // Payment proof operations\n  async getPaymentProofs(userId: string): Promise<PaymentProof[]> {\n    return await db\n      .select()\n      .from(paymentProofs)\n      .where(eq(paymentProofs.userId, userId))\n      .orderBy(desc(paymentProofs.createdAt));\n  }\n\n  async getAllPaymentProofs(): Promise<PaymentProof[]> {\n    return await db.select().from(paymentProofs).orderBy(desc(paymentProofs.createdAt));\n  }\n\n  async getPaymentProof(id: string): Promise<PaymentProof | undefined> {\n    const [proof] = await db.select().from(paymentProofs).where(eq(paymentProofs.id, id));\n    return proof;\n  }\n\n  async createPaymentProof(proofData: InsertPaymentProof): Promise<PaymentProof> {\n    const [proof] = await db.insert(paymentProofs).values(proofData).returning();\n    return proof;\n  }\n\n  async updatePaymentProofStatus(id: string, status: string, adminNotes?: string): Promise<void> {\n    await db\n      .update(paymentProofs)\n      .set({ \n        status: status as any, \n        adminNotes,\n        updatedAt: new Date() \n      })\n      .where(eq(paymentProofs.id, id));\n  }\n}\n\n// Use in-memory storage for local development, database storage for production\nimport { MemoryStorage } from \"./memoryStorage\";\n\nexport const storage = process.env.DATABASE_URL \n  ? new DatabaseStorage() \n  : new MemoryStorage();\n","size_bytes":8590},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/lib/authUtils.ts":{"content":"// Referenced from javascript_log_in_with_replit blueprint\nexport function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":175},"client/src/components/app-sidebar.tsx":{"content":"// Referenced from Shadcn sidebar documentation in universal_design_guidelines\nimport {\n  LayoutDashboard,\n  ShoppingCart,\n  History,\n  Wallet,\n  Users,\n  Settings,\n  LogOut,\n  TrendingUp,\n  Gift,\n  FileText,\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarFooter,\n  SidebarHeader,\n} from \"@/components/ui/sidebar\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  const userMenuItems = [\n    { title: \"Dashboard\", url: \"/\", icon: LayoutDashboard },\n    { title: \"Services\", url: \"/services\", icon: ShoppingCart },\n    { title: \"Orders\", url: \"/orders\", icon: History },\n    { title: \"Wallet\", url: \"/wallet\", icon: Wallet },\n    { title: \"Referrals\", url: \"/referrals\", icon: Gift },\n  ];\n\n  const adminMenuItems = [\n    { title: \"Admin Panel\", url: \"/admin\", icon: TrendingUp },\n    { title: \"Manage Users\", url: \"/admin/users\", icon: Users },\n    { title: \"Manage Services\", url: \"/admin/services\", icon: Settings },\n  ];\n\n  const resellerMenuItems = [\n    { title: \"API Docs\", url: \"/api-docs\", icon: FileText },\n  ];\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"p-6\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-8 h-8 rounded-md bg-primary flex items-center justify-center\">\n            <TrendingUp className=\"h-5 w-5 text-primary-foreground\" />\n          </div>\n          <span className=\"text-xl font-semibold\">ReelBoost</span>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent>\n        {/* Wallet Balance Widget */}\n        {user && (\n          <div className=\"px-6 pb-6\">\n            <Card>\n              <CardContent className=\"p-4 space-y-2\">\n                <div className=\"text-sm text-muted-foreground\">Wallet Balance</div>\n                <div className=\"text-2xl font-semibold\" data-testid=\"text-wallet-balance\">\n                  ‚Çπ{parseFloat(user.walletBalance || \"0\").toFixed(2)}\n                </div>\n                <Button asChild size=\"sm\" className=\"w-full\" data-testid=\"button-add-funds-sidebar\">\n                  <Link href=\"/wallet\">Add Funds</Link>\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Main Navigation */}\n        <SidebarGroup>\n          <SidebarGroupLabel>Menu</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {userMenuItems.map((item) => (\n                <SidebarMenuItem key={item.title}>\n                  <SidebarMenuButton asChild isActive={location === item.url}>\n                    <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </Link>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        {/* Reseller Menu */}\n        {user?.role === \"reseller\" || user?.role === \"admin\" ? (\n          <SidebarGroup>\n            <SidebarGroupLabel>Reseller</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {resellerMenuItems.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild isActive={location === item.url}>\n                      <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                        <item.icon className=\"h-4 w-4\" />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        ) : null}\n\n        {/* Admin Menu */}\n        {user?.role === \"admin\" && (\n          <SidebarGroup>\n            <SidebarGroupLabel>Administration</SidebarGroupLabel>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {adminMenuItems.map((item) => (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton asChild isActive={location === item.url}>\n                      <Link href={item.url} data-testid={`link-${item.title.toLowerCase().replace(' ', '-')}`}>\n                        <item.icon className=\"h-4 w-4\" />\n                        <span>{item.title}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        )}\n      </SidebarContent>\n\n      <SidebarFooter className=\"p-6\">\n        {user && (\n          <div className=\"flex items-center justify-between gap-3\">\n            <div className=\"flex items-center gap-3 min-w-0 flex-1\">\n              <Avatar className=\"h-9 w-9\">\n                <AvatarImage src={user.profileImageUrl || undefined} />\n                <AvatarFallback>\n                  {user.firstName?.[0] || user.email?.[0] || \"U\"}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"min-w-0 flex-1\">\n                <div className=\"text-sm font-medium truncate\" data-testid=\"text-user-name\">\n                  {user.firstName && user.lastName \n                    ? `${user.firstName} ${user.lastName}` \n                    : user.email}\n                </div>\n                <div className=\"text-xs text-muted-foreground capitalize\">{user.role}</div>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              asChild\n              data-testid=\"button-logout\"\n            >\n              <a href=\"/api/logout\" title=\"Logout\">\n                <LogOut className=\"h-4 w-4\" />\n              </a>\n            </Button>\n          </div>\n        )}\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":6395},"client/src/pages/orders.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Search, ShoppingCart } from \"lucide-react\";\nimport type { Order } from \"@shared/schema\";\n\nexport default function Orders() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n\n  const { data: orders, isLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/orders\"],\n  });\n\n  const getStatusBadge = (status: string) => {\n    const config: Record<string, { variant: \"default\" | \"secondary\" | \"destructive\" | \"outline\", className?: string }> = {\n      pending: { variant: \"secondary\", className: \"bg-yellow-500/10 text-yellow-700 dark:text-yellow-400\" },\n      processing: { variant: \"default\", className: \"bg-blue-500/10 text-blue-700 dark:text-blue-400\" },\n      completed: { variant: \"outline\", className: \"bg-green-500/10 text-green-700 dark:text-green-400\" },\n      failed: { variant: \"destructive\" },\n      refunded: { variant: \"secondary\" },\n    };\n    const style = config[status] || config.pending;\n    return (\n      <Badge variant={style.variant} className={style.className}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const filteredOrders = orders?.filter((order) => {\n    const matchesSearch = order.targetLink.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         order.id.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || order.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  }) || [];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-semibold\">Order History</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          View and track all your orders\n        </p>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by order ID or link...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9\"\n                data-testid=\"input-search-orders\"\n              />\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full md:w-48\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"processing\">Processing</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"failed\">Failed</SelectItem>\n                <SelectItem value=\"refunded\">Refunded</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Orders Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Orders</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <div className=\"animate-spin w-8 h-8 border-2 border-primary border-t-transparent rounded-full\" />\n            </div>\n          ) : filteredOrders.length === 0 ? (\n            <div className=\"text-center py-12 space-y-3\">\n              <ShoppingCart className=\"h-12 w-12 mx-auto text-muted-foreground/50\" />\n              <p className=\"text-muted-foreground\">No orders found</p>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Order ID</TableHead>\n                    <TableHead>Link</TableHead>\n                    <TableHead>Quantity</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Date</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredOrders.map((order) => (\n                    <TableRow key={order.id} data-testid={`row-order-${order.id}`}>\n                      <TableCell className=\"font-mono text-sm\">\n                        #{order.id.slice(0, 8)}\n                      </TableCell>\n                      <TableCell className=\"max-w-xs truncate\">\n                        {order.targetLink}\n                      </TableCell>\n                      <TableCell>{order.quantity.toLocaleString()}</TableCell>\n                      <TableCell className=\"font-medium\">\n                        ‚Çπ{parseFloat(order.amount).toFixed(2)}\n                      </TableCell>\n                      <TableCell>{getStatusBadge(order.status)}</TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {new Date(order.createdAt).toLocaleDateString()}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5999},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n   const port = Number(process.env.PORT) || 5000;\n  const host = process.env.REPLIT_DOMAINS ? \"0.0.0.0\" : \"127.0.0.1\";\n\n  server\n    .listen(\n      {\n        port,\n        host,\n      },\n      () => {\n        log(`‚úÖ Server running at http://${host}:${port}`);\n      }\n    )\n    .on(\"error\", (e: NodeJS.ErrnoException) => {\n      if (e.code === \"EADDRINUSE\" || e.code === \"ENOTSUP\") {\n        log(`‚ö†Ô∏è Port ${port} is busy or not supported, trying another...`);\n        server.listen(\n          {\n            port: 0,\n            host,\n          },\n          () => {\n            const addr = server.address();\n            const actualPort =\n              typeof addr === \"object\" && addr ? addr.port : port;\n            log(`‚úÖ Server now running at http://${host}:${actualPort}`);\n          }\n        );\n      } else {\n        throw e;\n      }\n    });\n})(); // üëà make sure this closing line is present!\n\n","size_bytes":2791},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"server/replitAuth.ts":{"content":"// Google OAuth authentication with in-memory session for local development\nimport { Strategy as GoogleStrategy, Profile, VerifyCallback } from \"passport-google-oauth20\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport MemoryStore from \"memorystore\";\nimport { storage } from \"./storage\";\n\nconst SessionStore = MemoryStore(session);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  return session({\n    secret: process.env.SESSION_SECRET || \"local-dev-secret-change-in-production\",\n    store: new SessionStore({\n      checkPeriod: sessionTtl,\n    }),\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nasync function upsertUser(profile: any) {\n  const userId = profile.id;\n  const email = profile.emails?.[0]?.value || \"\";\n  const firstName = profile.name?.givenName || \"\";\n  const lastName = profile.name?.familyName || \"\";\n  const profileImageUrl = profile.photos?.[0]?.value || \"\";\n\n  await storage.upsertUser({\n    id: userId,\n    email,\n    firstName,\n    lastName,\n    profileImageUrl,\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Only setup Google OAuth if credentials are provided\n  if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n    const domains = (process.env.REPLIT_DOMAINS || \"localhost:5000\").split(\",\");\n    \n    for (const domain of domains) {\n      const callbackURL = domain.includes(\"localhost\") \n        ? `http://${domain}/api/callback`\n        : `https://${domain}/api/callback`;\n        \n      const strategy = new GoogleStrategy(\n        {\n          clientID: process.env.GOOGLE_CLIENT_ID,\n          clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n          callbackURL,\n          scope: [\"profile\", \"email\"],\n          passReqToCallback: false,\n        },\n        async (accessToken: string, refreshToken: string, profile: Profile, done: VerifyCallback) => {\n          try {\n            await upsertUser(profile);\n            const user = {\n              id: profile.id,\n              email: profile.emails?.[0]?.value,\n              firstName: profile.name?.givenName,\n              lastName: profile.name?.familyName,\n              profileImageUrl: profile.photos?.[0]?.value,\n            };\n            done(null, user);\n          } catch (error) {\n            done(error as Error);\n          }\n        }\n      );\n      passport.use(`google:${domain}`, strategy);\n    }\n  }\n\n  passport.serializeUser((user: any, cb) => cb(null, user));\n  passport.deserializeUser((user: any, cb) => cb(null, user));\n\n  app.get(\"/api/login\", async (req, res, next) => {\n    if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n      passport.authenticate(`google:${req.hostname}`, {\n        scope: [\"profile\", \"email\"],\n      })(req, res, next);\n    } else {\n      // Auto-login for local development without Google OAuth\n      const devUser = {\n        id: \"admin-user-1\",\n        email: \"admin@reelboost.com\",\n        firstName: \"Admin\",\n        lastName: \"User\",\n      };\n      \n      try {\n        // Ensure user exists in storage (both memory and database)\n        await storage.upsertUser({\n          id: devUser.id,\n          email: devUser.email,\n          firstName: devUser.firstName,\n          lastName: devUser.lastName,\n        });\n        \n        req.login(devUser, (err) => {\n          if (err) return res.status(500).json({ message: \"Login failed\" });\n          res.redirect(\"/\");\n        });\n      } catch (error) {\n        console.error(\"Error creating dev user:\", error);\n        res.status(500).json({ message: \"Login failed\" });\n      }\n    }\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n      passport.authenticate(`google:${req.hostname}`, {\n        successRedirect: \"/\",\n        failureRedirect: \"/api/login\",\n      })(req, res, next);\n    } else {\n      res.redirect(\"/\");\n    }\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\"/\");\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  next();\n};\n\n// Admin-only middleware\nexport const isAdmin: RequestHandler = async (req, res, next) => {\n  const userId = (req.user as any)?.id;\n  if (!userId) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const user = await storage.getUser(userId);\n  if (user?.role !== \"admin\") {\n    return res.status(403).json({ message: \"Forbidden: Admin access required\" });\n  }\n\n  next();\n};\n","size_bytes":4933},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Instagram, \n  Youtube, \n  Facebook, \n  Twitter, \n  Send,\n  Zap,\n  Shield,\n  TrendingUp,\n  Users,\n  Clock,\n  DollarSign,\n  CheckCircle,\n  Star,\n  Lock,\n  Award,\n  ChevronDown\n} from \"lucide-react\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Landing() {\n  const platforms = [\n    { icon: Instagram, name: \"Instagram\", color: \"text-pink-500\" },\n    { icon: Youtube, name: \"YouTube\", color: \"text-red-500\" },\n    { icon: Facebook, name: \"Facebook\", color: \"text-blue-600\" },\n    { icon: Twitter, name: \"Twitter\", color: \"text-sky-500\" },\n    { icon: Send, name: \"Telegram\", color: \"text-blue-400\" },\n  ];\n\n  const features = [\n    {\n      icon: Zap,\n      title: \"Instant Delivery\",\n      description: \"Orders start processing within minutes of placement\",\n    },\n    {\n      icon: Shield,\n      title: \"100% Secure\",\n      description: \"Bank-grade encryption for all transactions\",\n    },\n    {\n      icon: DollarSign,\n      title: \"Best Prices\",\n      description: \"Competitive pricing starting from ‚Çπ0.22 per 1K\",\n    },\n    {\n      icon: Clock,\n      title: \"24/7 Support\",\n      description: \"Round-the-clock customer support for all your needs\",\n    },\n  ];\n\n  const stats = [\n    { icon: Users, value: \"50K+\", label: \"Active Users\" },\n    { icon: TrendingUp, value: \"1M+\", label: \"Orders Completed\" },\n    { icon: Award, value: \"99.9%\", label: \"Success Rate\" },\n  ];\n\n  const testimonials = [\n    {\n      name: \"Priya Sharma\",\n      role: \"Content Creator\",\n      image: \"PS\",\n      content: \"ReelBoost helped me grow from 5K to 50K followers in just 3 months! The engagement is 100% real and organic.\",\n      rating: 5\n    },\n    {\n      name: \"Rahul Verma\",\n      role: \"Digital Marketer\",\n      image: \"RV\",\n      content: \"Best SMM panel I've used. Fast delivery, great prices, and excellent customer support. Highly recommended!\",\n      rating: 5\n    },\n    {\n      name: \"Anita Desai\",\n      role: \"Influencer\",\n      image: \"AD\",\n      content: \"This reel got 10K views in 2 hours using ReelBoost! The quality of engagement is outstanding.\",\n      rating: 5\n    }\n  ];\n\n  const faqs = [\n    {\n      question: \"How to place an order?\",\n      answer: \"It's simple! Sign in, select your platform (Instagram, YouTube, etc.), choose the service you need, paste your content link, select quantity, and confirm payment. Orders start processing within minutes.\"\n    },\n    {\n      question: \"Is it safe to use?\",\n      answer: \"Absolutely! We use industry-standard encryption and work only with verified, high-quality service providers. Your account information is never shared, and all engagement is 100% real.\"\n    },\n    {\n      question: \"How long does delivery take?\",\n      answer: \"Most orders start processing within 5-10 minutes. Full delivery time varies by service, typically ranging from 30 minutes to 24 hours depending on the quantity and platform.\"\n    },\n    {\n      question: \"What payment methods do you accept?\",\n      answer: \"We accept UPI payments, and you can top up your wallet easily. All transactions are secure and encrypted.\"\n    },\n    {\n      question: \"Can I get a refund?\",\n      answer: \"Yes! If a service fails to deliver or doesn't meet our quality standards, you can request a refund. We also offer instant order cancellation before processing begins.\"\n    },\n    {\n      question: \"Do you offer discounts for bulk orders?\",\n      answer: \"Yes! Join our reseller program to get special discounts and earn commissions. Contact our support team to learn more about bulk pricing.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b sticky top-0 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 z-50\">\n        <div className=\"container mx-auto px-6 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-8 h-8 rounded-md bg-primary flex items-center justify-center\">\n              <TrendingUp className=\"h-5 w-5 text-primary-foreground\" />\n            </div>\n            <span className=\"text-xl font-semibold\">ReelBoost</span>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <ThemeToggle />\n            <Button asChild data-testid=\"button-login\">\n              <a href=\"/login\">Sign In</a>\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"container mx-auto px-6 py-16 lg:py-24\">\n        <div className=\"max-w-5xl mx-auto\">\n          <div className=\"text-center space-y-6 mb-8\">\n            <Badge className=\"px-4 py-2 text-sm font-medium\" variant=\"secondary\" data-testid=\"badge-realviews\">\n              <CheckCircle className=\"h-4 w-4 mr-2 inline\" />\n              100% Real Views & Engagement\n            </Badge>\n            <h1 className=\"text-4xl md:text-6xl lg:text-7xl font-bold tracking-tight\">\n              Boost Your Reels\n              <br />\n              <span className=\"bg-gradient-to-r from-primary via-primary to-[hsl(var(--accent-green))] bg-clip-text text-transparent\">\n                Instantly & Securely\n              </span>\n            </h1>\n            <p className=\"text-lg md:text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Professional SMM panel for Instagram, YouTube, TikTok, and more. \n              Get real views, likes, and followers with our automated, reliable service.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center pt-4\">\n              <Button size=\"lg\" asChild data-testid=\"button-get-started\" className=\"text-lg px-8\">\n                <a href=\"/login\">Get Started Free</a>\n              </Button>\n              <Button size=\"lg\" variant=\"outline\" asChild className=\"text-lg px-8\">\n                <a href=\"#features\">Learn More</a>\n              </Button>\n            </div>\n\n            {/* Live Example Banner */}\n            <Card className=\"max-w-2xl mx-auto mt-8 border-[hsl(var(--accent-green))] bg-gradient-to-r from-primary/5 to-[hsl(var(--accent-green))]/5\" data-testid=\"card-example\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-center gap-3\">\n                  <TrendingUp className=\"h-6 w-6 text-[hsl(var(--accent-green))]\" />\n                  <p className=\"text-base md:text-lg font-semibold\">\n                    This reel got <span className=\"text-primary\">10K views</span> in{\" \"}\n                    <span className=\"text-[hsl(var(--accent-green))]\">2 hours</span>!\n                  </p>\n                  <Zap className=\"h-6 w-6 text-primary animate-pulse\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Platform Icons */}\n          <div className=\"flex items-center justify-center gap-8 flex-wrap pt-4\">\n            {platforms.map((platform) => (\n              <div key={platform.name} className=\"flex flex-col items-center gap-2 opacity-70 hover:opacity-100 transition-opacity\">\n                <div className={`${platform.color}`}>\n                  <platform.icon className=\"h-8 w-8\" />\n                </div>\n                <span className=\"text-xs text-muted-foreground\">{platform.name}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"bg-card border-y py-16\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n            {stats.map((stat) => (\n              <div key={stat.label} className=\"text-center space-y-2\" data-testid={`stat-${stat.label.toLowerCase().replace(/\\s/g, '-')}`}>\n                <stat.icon className=\"h-10 w-10 mx-auto text-primary\" />\n                <div className=\"text-4xl font-bold bg-gradient-to-r from-primary to-[hsl(var(--accent-green))] bg-clip-text text-transparent\">\n                  {stat.value}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">{stat.label}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"container mx-auto px-6 py-20\">\n        <div className=\"text-center space-y-4 mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold\">Why Choose ReelBoost?</h2>\n          <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n            Trusted by thousands of businesses and influencers worldwide\n          </p>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-6xl mx-auto\">\n          {features.map((feature) => (\n            <Card key={feature.title} className=\"hover-elevate\" data-testid={`feature-${feature.title.toLowerCase().replace(/\\s/g, '-')}`}>\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"w-12 h-12 rounded-md bg-primary/10 flex items-center justify-center\">\n                  <feature.icon className=\"h-6 w-6 text-primary\" />\n                </div>\n                <h3 className=\"font-semibold text-lg\">{feature.title}</h3>\n                <p className=\"text-sm text-muted-foreground\">{feature.description}</p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </section>\n\n      {/* Trust Signals Section */}\n      <section className=\"bg-card border-y py-16\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">Trusted & Secure</h2>\n            <p className=\"text-muted-foreground\">Your security is our top priority</p>\n          </div>\n          <div className=\"flex flex-wrap items-center justify-center gap-8 max-w-4xl mx-auto\">\n            <div className=\"flex items-center gap-3 text-muted-foreground\">\n              <Lock className=\"h-6 w-6 text-primary\" />\n              <span className=\"font-medium\">SSL Encrypted</span>\n            </div>\n            <div className=\"flex items-center gap-3 text-muted-foreground\">\n              <Shield className=\"h-6 w-6 text-primary\" />\n              <span className=\"font-medium\">Secure Payments</span>\n            </div>\n            <div className=\"flex items-center gap-3 text-muted-foreground\">\n              <Award className=\"h-6 w-6 text-primary\" />\n              <span className=\"font-medium\">Verified Services</span>\n            </div>\n            <div className=\"flex items-center gap-3 text-muted-foreground\">\n              <CheckCircle className=\"h-6 w-6 text-primary\" />\n              <span className=\"font-medium\">Money-Back Guarantee</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"container mx-auto px-6 py-20\">\n        <div className=\"text-center space-y-4 mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold\">What Our Clients Say</h2>\n          <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n            Join thousands of satisfied customers growing their social presence\n          </p>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-6xl mx-auto\">\n          {testimonials.map((testimonial, idx) => (\n            <Card key={idx} className=\"hover-elevate\" data-testid={`testimonial-${idx}`}>\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"flex items-center gap-1\">\n                  {[...Array(testimonial.rating)].map((_, i) => (\n                    <Star key={i} className=\"h-4 w-4 fill-primary text-primary\" />\n                  ))}\n                </div>\n                <p className=\"text-sm text-muted-foreground italic\">\"{testimonial.content}\"</p>\n                <div className=\"flex items-center gap-3 pt-2\">\n                  <div className=\"w-10 h-10 rounded-full bg-primary/10 flex items-center justify-center font-semibold text-primary\">\n                    {testimonial.image}\n                  </div>\n                  <div>\n                    <div className=\"font-semibold text-sm\">{testimonial.name}</div>\n                    <div className=\"text-xs text-muted-foreground\">{testimonial.role}</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"bg-card border-y py-20\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center space-y-4 mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold\">Frequently Asked Questions</h2>\n            <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n              Everything you need to know about ReelBoost\n            </p>\n          </div>\n          <div className=\"max-w-3xl mx-auto\">\n            <Accordion type=\"single\" collapsible className=\"w-full\">\n              {faqs.map((faq, idx) => (\n                <AccordionItem key={idx} value={`item-${idx}`} data-testid={`faq-${idx}`}>\n                  <AccordionTrigger className=\"text-left font-medium\">\n                    {faq.question}\n                  </AccordionTrigger>\n                  <AccordionContent className=\"text-muted-foreground\">\n                    {faq.answer}\n                  </AccordionContent>\n                </AccordionItem>\n              ))}\n            </Accordion>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"container mx-auto px-6 py-20\">\n        <Card className=\"max-w-4xl mx-auto bg-gradient-to-r from-primary/10 to-[hsl(var(--accent-green))]/10 border-primary/20\">\n          <CardContent className=\"p-12 text-center space-y-6\">\n            <h2 className=\"text-3xl md:text-4xl font-bold\">Ready to Boost Your Social Media?</h2>\n            <p className=\"text-muted-foreground max-w-2xl mx-auto text-lg\">\n              Join thousands of satisfied customers and start growing your presence today\n            </p>\n            <Button size=\"lg\" asChild data-testid=\"button-cta-start\" className=\"text-lg px-8\">\n              <a href=\"/login\">Start Now - It's Free</a>\n            </Button>\n            <p className=\"text-sm text-muted-foreground\">\n              <CheckCircle className=\"h-4 w-4 inline mr-1\" />\n              No credit card required ‚Ä¢ Instant setup ‚Ä¢ Cancel anytime\n            </p>\n          </CardContent>\n        </Card>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t py-8 bg-card\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex flex-col md:flex-row items-center justify-between gap-4 text-sm text-muted-foreground\">\n            <div>¬© 2025 ReelBoost. All rights reserved.</div>\n            <div className=\"flex items-center gap-6\">\n              <a href=\"#\" className=\"hover:text-foreground transition-colors\">Privacy Policy</a>\n              <a href=\"#\" className=\"hover:text-foreground transition-colors\">Terms of Service</a>\n              <a href=\"#\" className=\"hover:text-foreground transition-colors\">Refund Policy</a>\n              <a href=\"#\" className=\"hover:text-foreground transition-colors\">Contact Us</a>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":15636},"server/localAuth.ts":{"content":"// Simple local authentication for development (no Replit dependencies)\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport MemoryStore from \"memorystore\";\nimport { storage } from \"./storage\";\n\nconst SessionStore = MemoryStore(session);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  return session({\n    secret: process.env.SESSION_SECRET || \"local-dev-secret-change-in-production\",\n    store: new SessionStore({\n      checkPeriod: sessionTtl,\n    }),\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to false for local development\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.serializeUser((user: any, cb) => cb(null, user));\n  passport.deserializeUser((user: any, cb) => cb(null, user));\n\n  // Simple auto-login for local development\n  app.get(\"/api/login\", async (req, res) => {\n    // Auto-login as admin user for local development\n    const adminUser = {\n      id: \"admin-user-1\",\n      email: \"admin@reelboost.com\",\n      firstName: \"Admin\",\n      lastName: \"User\",\n    };\n    \n    req.login(adminUser, (err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Login failed\" });\n      }\n      res.redirect(\"/\");\n    });\n  });\n\n  app.get(\"/api/callback\", (req, res) => {\n    res.redirect(\"/\");\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\"/\");\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  next();\n};\n\n// Admin-only middleware\nexport const isAdmin: RequestHandler = async (req, res, next) => {\n  const userId = (req.user as any)?.id;\n  if (!userId) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const user = await storage.getUser(userId);\n  if (user?.role !== \"admin\") {\n    return res.status(403).json({ message: \"Forbidden: Admin access required\" });\n  }\n\n  next();\n};\n","size_bytes":2249},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"design_guidelines.md":{"content":"# ReelBoost Design Guidelines\n\n## Design Approach\n**Selected Framework:** Modern Dashboard System inspired by Linear and Notion  \n**Rationale:** As a utility-focused SMM panel with complex data workflows, efficiency and clarity take precedence over decorative elements. The design emphasizes professional credibility, clear information hierarchy, and streamlined task completion.\n\n**Core Principles:**\n- Data clarity over visual flourish\n- Consistent, predictable patterns for efficiency\n- Professional trust-building through clean aesthetics\n- Mobile-responsive dashboard layouts\n\n---\n\n## Color Palette\n\n### Light Mode\n- **Primary Brand:** 239 84% 67% (vibrant purple-blue for CTAs and key actions)\n- **Background:** 0 0% 100% (pure white)\n- **Surface:** 240 5% 96% (subtle gray for cards)\n- **Border:** 240 6% 90% (soft borders)\n- **Text Primary:** 240 10% 4% (near-black)\n- **Text Secondary:** 240 4% 46% (medium gray)\n- **Success:** 142 76% 36% (wallet/completed orders)\n- **Warning:** 38 92% 50% (pending status)\n- **Error:** 0 84% 60% (failed orders/refunds)\n\n### Dark Mode\n- **Primary Brand:** 239 84% 67% (consistent with light)\n- **Background:** 240 10% 4% (deep dark)\n- **Surface:** 240 6% 10% (elevated cards)\n- **Border:** 240 4% 16% (subtle borders)\n- **Text Primary:** 0 0% 98% (near-white)\n- **Text Secondary:** 240 5% 65% (muted text)\n\n---\n\n## Typography\n\n**Font System:** Inter (Google Fonts)\n- **Display/Hero:** 600 weight, 36-48px (dashboard headers)\n- **H1:** 600 weight, 30-36px (page titles)\n- **H2:** 600 weight, 24px (section headers)\n- **H3:** 500 weight, 18px (card titles)\n- **Body:** 400 weight, 16px (primary content)\n- **Small:** 400 weight, 14px (metadata, labels)\n- **Caption:** 400 weight, 12px (table headers, timestamps)\n\n**Numerical Data:** Tabular figures for pricing/stats consistency\n\n---\n\n## Layout System\n\n**Spacing Primitives:** Tailwind units of 2, 4, 6, 8, 12, 16, 20, 24\n- Component padding: p-6 or p-8\n- Section gaps: gap-6 or gap-8\n- Page margins: px-6 md:px-8 lg:px-12\n- Card spacing: space-y-4\n\n**Grid Structure:**\n- Dashboard: 12-column grid with sidebar (col-span-3) + main (col-span-9)\n- Service cards: grid-cols-1 md:grid-cols-2 lg:grid-cols-3\n- Stats/metrics: grid-cols-2 md:grid-cols-4\n- Tables: full-width with horizontal scroll on mobile\n\n**Container Widths:**\n- Dashboard content: max-w-7xl\n- Forms: max-w-2xl\n- Modals: max-w-lg to max-w-3xl based on content\n\n---\n\n## Component Library\n\n### Navigation\n- **Sidebar:** Fixed left (desktop), collapsible mobile drawer with logo, wallet balance widget, main nav items, user profile at bottom\n- **Top Bar:** Transparent with search, notifications bell, user avatar dropdown\n- **Breadcrumbs:** For deep navigation (Dashboard > Orders > #12345)\n\n### Dashboard Widgets\n- **Wallet Card:** Prominent balance display, \"Add Funds\" CTA, recent transaction preview\n- **Stats Cards:** 4-column grid showing revenue, active orders, completed today, pending refunds with icon, value, and trend indicator\n- **Activity Feed:** Timeline-style recent orders with status badges\n- **Quick Actions:** Floating action button or prominent card for \"New Order\"\n\n### Service Catalog\n- **Service Cards:** Image thumbnail (platform icon), service name, price badge (‚Çπ/1K), ETA label, \"Order Now\" button\n- **Category Tabs:** Horizontal scrolling tabs for platforms (Instagram, YouTube, etc.)\n- **Filters:** Dropdown for price range, ETA sorting\n\n### Order Interface\n- **Order Form:** Multi-step or single-page with:\n  - Service dropdown with search\n  - Link input (auto-validation)\n  - Quantity slider + input (min/max display)\n  - Live price calculation display\n  - Wallet balance check indicator\n  - Confirm button (disabled if insufficient funds)\n- **Order Tracking:** Progress stepper (Pending ‚Üí Processing ‚Üí Completed) with timestamps\n\n### Data Tables\n- **Order History:** Sortable columns (ID, Service, Status, Amount, Date), status badges, action menu (view details, refund)\n- **Service Management (Admin):** Inline editing, bulk actions toolbar\n- **Pagination:** Bottom-aligned with page numbers + prev/next\n\n### Forms & Inputs\n- **Text Fields:** Outlined style with floating labels, helper text below, error states in red\n- **Dropdowns:** Custom styled with search capability for long lists\n- **Amount Input:** Prefix ‚Çπ symbol, auto-formatting for thousands\n- **Toggle Switches:** For enable/disable services (admin)\n\n### Modals & Overlays\n- **Add Funds Modal:** Razorpay payment integration, amount presets (‚Çπ500, ‚Çπ1000, ‚Çπ5000, Custom)\n- **Order Confirmation:** Summary view before final submission\n- **Support Ticket:** Slide-over panel from right with chat interface\n\n### Status Indicators\n- **Badges:** Rounded pills with color coding (Pending=yellow, Processing=blue, Completed=green, Failed=red)\n- **Progress Bars:** Linear progress for processing orders\n- **Toast Notifications:** Top-right for success/error feedback\n\n---\n\n## Images & Visual Assets\n\n**Icons:** Heroicons via CDN (outline style for navigation, solid for actions)\n\n**Service Platform Icons:** \n- Dashboard stats: Small 24x24 platform logos (Instagram, YouTube, etc.)\n- Service cards: 48x48 platform logos as thumbnails\n- Order history: 32x32 logos in table rows\n\n**Wallet/Payment Graphics:**\n- Illustrated wallet icon for empty wallet state\n- Credit card icon for payment methods\n- Success checkmark animation for completed payments\n\n**No Hero Image:** This is a dashboard application, not a marketing site. Lead with functional dashboard view immediately after login.\n\n---\n\n## Responsive Behavior\n\n- **Desktop (lg+):** Full sidebar + main content, multi-column grids\n- **Tablet (md):** Collapsible sidebar, 2-column grids, horizontal scroll for tables\n- **Mobile (base):** Bottom navigation bar, single-column stacks, touch-optimized buttons (min 44px height)\n\n---\n\n## Admin-Specific Design\n\n- **Admin Dashboard:** Additional metrics (total users, revenue graphs, system health)\n- **CRUD Tables:** Inline editing with save/cancel actions, bulk selection checkboxes\n- **Settings Panels:** Tab-based sections (General, Services, API, Security) with form groups\n- **User Management:** Searchable table with role badges, quick actions (ban, edit, view details)\n\n---\n\n## Trust & Security Visual Cues\n\n- **SSL Badge:** Small lock icon in footer\n- **Payment Security:** Razorpay logo near payment forms\n- **2FA Setup:** Shield icon with green checkmark when enabled\n- **API Key Display:** Monospace font with copy button and visibility toggle\n- **Refund Policy Link:** Always visible in wallet/order areas","size_bytes":6572},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/components/theme-provider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":677},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"server/routes.ts":{"content":"// Referenced from javascript_log_in_with_replit blueprint\nimport type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated, isAdmin } from \"./replitAuth\";\nimport rateLimit from \"express-rate-limit\";\n\n// Rate limiter\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: \"Too many requests from this IP, please try again later.\",\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Apply rate limiting to all API routes\n  app.use(\"/api\", limiter);\n\n  // ===== AUTH ROUTES =====\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // ===== SERVICE ROUTES =====\n  // Get all active services (public for authenticated users)\n  app.get(\"/api/services\", isAuthenticated, async (req, res) => {\n    try {\n      const services = await storage.getActiveServices();\n      res.json(services);\n    } catch (error) {\n      console.error(\"Error fetching services:\", error);\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  // Get single service\n  app.get(\"/api/services/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const service = await storage.getService(req.params.id);\n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error fetching service:\", error);\n      res.status(500).json({ message: \"Failed to fetch service\" });\n    }\n  });\n\n  // ===== ORDER ROUTES =====\n  // Get user's orders\n  app.get(\"/api/orders\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const orders = await storage.getOrders(userId);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  // Get recent orders\n  app.get(\"/api/orders/recent\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const orders = await storage.getRecentOrders(userId, 10);\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching recent orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent orders\" });\n    }\n  });\n\n  // Create order\n  app.post(\"/api/orders\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { serviceId, targetLink, quantity } = req.body;\n\n      // Validate inputs\n      if (!serviceId || !targetLink || !quantity) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Get service\n      const service = await storage.getService(serviceId);\n      if (!service || service.isActive !== 1) {\n        return res.status(404).json({ message: \"Service not found or inactive\" });\n      }\n\n      // Validate quantity\n      if (quantity < service.minQuantity || quantity > service.maxQuantity) {\n        return res.status(400).json({ \n          message: `Quantity must be between ${service.minQuantity} and ${service.maxQuantity}` \n        });\n      }\n\n      // Calculate price\n      const amount = (quantity / 1000) * parseFloat(service.pricePerThousand);\n\n      // Get user and check balance\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const walletBalance = parseFloat(user.walletBalance);\n      if (walletBalance < amount) {\n        return res.status(400).json({ message: \"Insufficient wallet balance\" });\n      }\n\n      // Create order\n      const order = await storage.createOrder({\n        userId,\n        serviceId,\n        targetLink,\n        quantity,\n        amount: amount.toFixed(2),\n      });\n\n      // Deduct from wallet and create transaction\n      const newBalance = walletBalance - amount;\n      await storage.updateUserBalance(userId, newBalance.toFixed(2));\n      \n      await storage.createTransaction({\n        userId,\n        type: \"order\",\n        amount: amount.toFixed(2),\n        balanceBefore: user.walletBalance,\n        balanceAfter: newBalance.toFixed(2),\n        description: `Order #${order.id.slice(0, 8)} - ${service.name}`,\n        orderId: order.id,\n      });\n\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      res.status(500).json({ message: \"Failed to create order\" });\n    }\n  });\n\n  // ===== WALLET/TRANSACTION ROUTES =====\n  // Get user transactions\n  app.get(\"/api/transactions\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const transactions = await storage.getTransactions(userId);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch transactions\" });\n    }\n  });\n\n  // Submit UPI payment proof\n  app.post(\"/api/wallet/submit-payment-proof\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const { amount, utrNumber, screenshotUrl } = req.body;\n\n      if (!amount || amount <= 0) {\n        return res.status(400).json({ message: \"Invalid amount\" });\n      }\n\n      if (!utrNumber && !screenshotUrl) {\n        return res.status(400).json({ message: \"Please provide UTR number or payment screenshot URL\" });\n      }\n\n      const proof = await storage.createPaymentProof({\n        userId,\n        amount: parseFloat(amount).toFixed(2),\n        utrNumber,\n        screenshotUrl,\n      });\n\n      res.json({ \n        success: true, \n        message: \"Payment proof submitted successfully. Admin will verify and credit your wallet within 24 hours.\",\n        proof \n      });\n    } catch (error) {\n      console.error(\"Error submitting payment proof:\", error);\n      res.status(500).json({ message: \"Failed to submit payment proof\" });\n    }\n  });\n\n  // Get user's payment proofs\n  app.get(\"/api/wallet/payment-proofs\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const proofs = await storage.getPaymentProofs(userId);\n      res.json(proofs);\n    } catch (error) {\n      console.error(\"Error fetching payment proofs:\", error);\n      res.status(500).json({ message: \"Failed to fetch payment proofs\" });\n    }\n  });\n\n  // ===== REFERRAL ROUTES =====\n  // Get user referrals\n  app.get(\"/api/referrals\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const referrals = await storage.getReferrals(userId);\n      res.json(referrals);\n    } catch (error) {\n      console.error(\"Error fetching referrals:\", error);\n      res.status(500).json({ message: \"Failed to fetch referrals\" });\n    }\n  });\n\n  // Get user analytics\n  app.get(\"/api/analytics/user\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const [orders, transactions, allServices] = await Promise.all([\n        storage.getOrders(userId),\n        storage.getTransactions(userId),\n        storage.getServices(),\n      ]);\n\n      // Calculate stats\n      const totalOrders = orders.length;\n      const totalSpent = orders.reduce((sum, order) => sum + parseFloat(order.amount), 0);\n      \n      // Orders by status\n      const ordersByStatus = {\n        pending: orders.filter(o => o.status === \"pending\").length,\n        processing: orders.filter(o => o.status === \"processing\").length,\n        completed: orders.filter(o => o.status === \"completed\").length,\n        failed: orders.filter(o => o.status === \"failed\").length,\n      };\n\n      // Popular services (top 5)\n      const serviceCount: Record<string, number> = {};\n      orders.forEach(order => {\n        serviceCount[order.serviceId] = (serviceCount[order.serviceId] || 0) + 1;\n      });\n      const popularServices = Object.entries(serviceCount)\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 5)\n        .map(([serviceId, count]) => {\n          const service = allServices.find(s => s.id === serviceId);\n          return {\n            serviceId,\n            serviceName: service?.name || \"Unknown Service\",\n            platform: service?.platform || \"unknown\",\n            orderCount: count,\n          };\n        });\n\n      // Spending trend (last 30 days)\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      \n      const spendingByDay: Record<string, number> = {};\n      orders.forEach(order => {\n        const orderDate = new Date(order.createdAt);\n        if (orderDate >= thirtyDaysAgo) {\n          const dateKey = orderDate.toISOString().split('T')[0];\n          spendingByDay[dateKey] = (spendingByDay[dateKey] || 0) + parseFloat(order.amount);\n        }\n      });\n\n      const spendingTrend = Object.entries(spendingByDay)\n        .sort((a, b) => a[0].localeCompare(b[0]))\n        .map(([date, amount]) => ({ date, amount: parseFloat(amount.toFixed(2)) }));\n\n      res.json({\n        totalOrders,\n        totalSpent: totalSpent.toFixed(2),\n        ordersByStatus,\n        popularServices,\n        spendingTrend,\n      });\n    } catch (error) {\n      console.error(\"Error fetching user analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  // ===== ADMIN ROUTES =====\n  // Get all users (admin only)\n  app.get(\"/api/admin/users\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const allUsers = await storage.getServices(); // This will be fixed to get all users\n      // For now, return empty array as we need to add getAllUsers to storage\n      res.json([]);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Get all orders (admin only)\n  app.get(\"/api/admin/orders\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const orders = await storage.getAllOrders();\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching all orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  // Get all services (admin only)\n  app.get(\"/api/admin/services\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const services = await storage.getServices();\n      res.json(services);\n    } catch (error) {\n      console.error(\"Error fetching services:\", error);\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  // Create service (admin only)\n  app.post(\"/api/admin/services\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const serviceData = req.body;\n      const service = await storage.createService(serviceData);\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error creating service:\", error);\n      res.status(500).json({ message: \"Failed to create service\" });\n    }\n  });\n\n  // Update service (admin only)\n  app.patch(\"/api/admin/services/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const serviceData = req.body;\n      const service = await storage.updateService(id, serviceData);\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error updating service:\", error);\n      res.status(500).json({ message: \"Failed to update service\" });\n    }\n  });\n\n  // Delete service (admin only)\n  app.delete(\"/api/admin/services/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteService(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting service:\", error);\n      res.status(500).json({ message: \"Failed to delete service\" });\n    }\n  });\n\n  // Get all payment proofs (admin only)\n  app.get(\"/api/admin/payment-proofs\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const proofs = await storage.getAllPaymentProofs();\n      res.json(proofs);\n    } catch (error) {\n      console.error(\"Error fetching payment proofs:\", error);\n      res.status(500).json({ message: \"Failed to fetch payment proofs\" });\n    }\n  });\n\n  // Approve/reject payment proof (admin only)\n  app.patch(\"/api/admin/payment-proofs/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status, adminNotes } = req.body;\n\n      if (!status || ![\"approved\", \"rejected\"].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n\n      const proof = await storage.getPaymentProof(id);\n      if (!proof) {\n        return res.status(404).json({ message: \"Payment proof not found\" });\n      }\n\n      if (proof.status !== \"pending\") {\n        return res.status(400).json({ message: \"Payment proof already processed\" });\n      }\n\n      // Update payment proof status\n      await storage.updatePaymentProofStatus(id, status, adminNotes);\n\n      // If approved, credit user's wallet\n      if (status === \"approved\") {\n        const user = await storage.getUser(proof.userId);\n        if (user) {\n          const currentBalance = parseFloat(user.walletBalance);\n          const amount = parseFloat(proof.amount);\n          const newBalance = currentBalance + amount;\n\n          await storage.updateUserBalance(proof.userId, newBalance.toFixed(2));\n\n          // Create transaction record\n          await storage.createTransaction({\n            userId: proof.userId,\n            type: \"deposit\",\n            amount: proof.amount,\n            balanceBefore: user.walletBalance,\n            balanceAfter: newBalance.toFixed(2),\n            description: `Wallet top-up via UPI${proof.utrNumber ? ` (UTR: ${proof.utrNumber})` : ''}`,\n          });\n        }\n      }\n\n      res.json({ success: true, message: `Payment proof ${status}` });\n    } catch (error) {\n      console.error(\"Error updating payment proof:\", error);\n      res.status(500).json({ message: \"Failed to update payment proof\" });\n    }\n  });\n\n  // Get admin analytics (admin only)\n  app.get(\"/api/admin/analytics\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const [allOrders, allProofs, allServices] = await Promise.all([\n        storage.getAllOrders(),\n        storage.getAllPaymentProofs(),\n        storage.getServices(),\n      ]);\n\n      // Calculate stats\n      const totalOrders = allOrders.length;\n      const completedOrders = allOrders.filter(o => o.status === \"completed\").length;\n      const pendingOrders = allOrders.filter(o => o.status === \"pending\").length;\n      const processingOrders = allOrders.filter(o => o.status === \"processing\").length;\n      \n      const totalRevenue = allOrders.reduce((sum, order) => sum + parseFloat(order.amount), 0);\n      \n      const pendingProofs = allProofs.filter(p => p.status === \"pending\").length;\n      const approvedProofs = allProofs.filter(p => p.status === \"approved\").length;\n      const rejectedProofs = allProofs.filter(p => p.status === \"rejected\").length;\n\n      const activeServices = allServices.filter(s => s.isActive === 1).length;\n\n      res.json({\n        orders: {\n          total: totalOrders,\n          completed: completedOrders,\n          pending: pendingOrders,\n          processing: processingOrders,\n        },\n        revenue: {\n          total: totalRevenue.toFixed(2),\n        },\n        paymentProofs: {\n          pending: pendingProofs,\n          approved: approvedProofs,\n          rejected: rejectedProofs,\n        },\n        services: {\n          total: allServices.length,\n          active: activeServices,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  // ===== RESELLER API ROUTES =====\n  // Note: These would use API key authentication in production\n  // For now, they use the same authentication as regular routes\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":16439},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/pages/services.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Instagram, Youtube, Facebook, Twitter, Send, Search, SlidersHorizontal } from \"lucide-react\";\nimport type { Service } from \"@shared/schema\";\nimport { OrderForm } from \"@/components/order-form\";\n\nconst platformIcons: Record<string, any> = {\n  instagram: Instagram,\n  youtube: Youtube,\n  facebook: Facebook,\n  twitter: Twitter,\n  telegram: Send,\n  tiktok: Send,\n};\n\nconst platformColors: Record<string, string> = {\n  instagram: \"text-pink-500\",\n  youtube: \"text-red-500\",\n  facebook: \"text-blue-600\",\n  twitter: \"text-sky-500\",\n  telegram: \"text-blue-400\",\n  tiktok: \"text-black dark:text-white\",\n};\n\nexport default function Services() {\n  const [selectedPlatform, setSelectedPlatform] = useState<string>(\"all\");\n  const [selectedService, setSelectedService] = useState<Service | null>(null);\n  const [orderDialogOpen, setOrderDialogOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [priceFilter, setPriceFilter] = useState(\"all\");\n  const [deliveryFilter, setDeliveryFilter] = useState(\"all\");\n\n  const { data: services, isLoading } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  const activeServices = services?.filter(s => s.isActive === 1) || [];\n  \n  const platforms = [\"all\", \"instagram\", \"youtube\", \"facebook\", \"twitter\", \"telegram\", \"tiktok\"];\n  \n  const filteredServices = activeServices.filter((service) => {\n    // Platform filter\n    const matchesPlatform = selectedPlatform === \"all\" || service.platform === selectedPlatform;\n    \n    // Search filter\n    const matchesSearch = searchTerm === \"\" || \n      service.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      service.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    // Price filter\n    const price = parseFloat(service.pricePerThousand);\n    const matchesPrice = \n      priceFilter === \"all\" ||\n      (priceFilter === \"low\" && price < 2) ||\n      (priceFilter === \"medium\" && price >= 2 && price < 5) ||\n      (priceFilter === \"high\" && price >= 5);\n    \n    // Delivery filter (based on ETA)\n    const matchesDelivery = \n      deliveryFilter === \"all\" ||\n      (deliveryFilter === \"instant\" && service.eta?.toLowerCase().includes(\"instant\")) ||\n      (deliveryFilter === \"fast\" && (service.eta?.includes(\"min\") || service.eta?.includes(\"1 hr\") || service.eta?.includes(\"2 hrs\"))) ||\n      (deliveryFilter === \"standard\" && service.eta && !service.eta.toLowerCase().includes(\"instant\"));\n    \n    return matchesPlatform && matchesSearch && matchesPrice && matchesDelivery;\n  });\n\n  const handleOrderClick = (service: Service) => {\n    setSelectedService(service);\n    setOrderDialogOpen(true);\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-semibold\">Services</h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Choose from our wide range of social media services\n        </p>\n      </div>\n\n      {/* Search and Filters */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search services...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-9\"\n                data-testid=\"input-search-services\"\n              />\n            </div>\n            <Select value={priceFilter} onValueChange={setPriceFilter}>\n              <SelectTrigger className=\"w-full md:w-48\" data-testid=\"select-price-filter\">\n                <SelectValue placeholder=\"Price Range\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Prices</SelectItem>\n                <SelectItem value=\"low\">Low (&lt; ‚Çπ2/1K)</SelectItem>\n                <SelectItem value=\"medium\">Medium (‚Çπ2-5/1K)</SelectItem>\n                <SelectItem value=\"high\">High (&gt; ‚Çπ5/1K)</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={deliveryFilter} onValueChange={setDeliveryFilter}>\n              <SelectTrigger className=\"w-full md:w-48\" data-testid=\"select-delivery-filter\">\n                <SelectValue placeholder=\"Delivery Time\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Speeds</SelectItem>\n                <SelectItem value=\"instant\">Instant</SelectItem>\n                <SelectItem value=\"fast\">Fast (‚â§ 2 hrs)</SelectItem>\n                <SelectItem value=\"standard\">Standard</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          {(searchTerm || priceFilter !== \"all\" || deliveryFilter !== \"all\") && (\n            <div className=\"mt-4 text-sm text-muted-foreground\">\n              Showing {filteredServices.length} service{filteredServices.length !== 1 ? 's' : ''}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Platform Tabs */}\n      <Tabs value={selectedPlatform} onValueChange={setSelectedPlatform}>\n        <TabsList className=\"w-full justify-start overflow-x-auto\">\n          {platforms.map((platform) => {\n            const Icon = platformIcons[platform];\n            return (\n              <TabsTrigger \n                key={platform} \n                value={platform} \n                className=\"gap-2\"\n                data-testid={`tab-${platform}`}\n              >\n                {Icon && <Icon className={`h-4 w-4 ${platformColors[platform]}`} />}\n                <span className=\"capitalize\">{platform}</span>\n              </TabsTrigger>\n            );\n          })}\n        </TabsList>\n\n        {platforms.map((platform) => (\n          <TabsContent key={platform} value={platform} className=\"mt-6\">\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <div className=\"animate-spin w-8 h-8 border-2 border-primary border-t-transparent rounded-full\" />\n              </div>\n            ) : filteredServices.length === 0 ? (\n              <Card>\n                <CardContent className=\"py-12 text-center\">\n                  <p className=\"text-muted-foreground\">No services available</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredServices.map((service) => {\n                  const PlatformIcon = platformIcons[service.platform];\n                  return (\n                    <Card key={service.id} className=\"hover-elevate\" data-testid={`service-card-${service.id}`}>\n                      <CardHeader className=\"pb-4\">\n                        <div className=\"flex items-start justify-between gap-2\">\n                          <div className=\"flex items-center gap-3\">\n                            {PlatformIcon && (\n                              <div className={`w-12 h-12 rounded-md bg-card flex items-center justify-center ${platformColors[service.platform]}`}>\n                                <PlatformIcon className=\"h-6 w-6\" />\n                              </div>\n                            )}\n                            <div>\n                              <CardTitle className=\"text-base font-medium\">{service.name}</CardTitle>\n                              <Badge variant=\"outline\" className=\"mt-1 capitalize\">\n                                {service.platform}\n                              </Badge>\n                            </div>\n                          </div>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        {service.description && (\n                          <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                            {service.description}\n                          </p>\n                        )}\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">Price/1K</span>\n                          <span className=\"font-semibold\">‚Çπ{parseFloat(service.pricePerThousand).toFixed(2)}</span>\n                        </div>\n                        {service.eta && (\n                          <div className=\"flex items-center justify-between text-sm\">\n                            <span className=\"text-muted-foreground\">Delivery Time</span>\n                            <span className=\"font-medium\">{service.eta}</span>\n                          </div>\n                        )}\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">Min/Max</span>\n                          <span className=\"font-medium\">\n                            {service.minQuantity.toLocaleString()} - {service.maxQuantity.toLocaleString()}\n                          </span>\n                        </div>\n                        <Button \n                          className=\"w-full\" \n                          onClick={() => handleOrderClick(service)}\n                          data-testid={`button-order-${service.id}`}\n                        >\n                          Order Now\n                        </Button>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            )}\n          </TabsContent>\n        ))}\n      </Tabs>\n\n      {/* Order Dialog */}\n      <Dialog open={orderDialogOpen} onOpenChange={setOrderDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Place Order</DialogTitle>\n            <DialogDescription>\n              Fill in the details to place your order\n            </DialogDescription>\n          </DialogHeader>\n          {selectedService && (\n            <OrderForm \n              service={selectedService} \n              onSuccess={() => setOrderDialogOpen(false)}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":10848},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977}},"version":2}